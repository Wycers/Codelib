
lab11_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b6c  08004b6c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b6c  08004b6c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b6c  08004b6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000010  08004b84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  08004b84  0002121c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f5d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d30  00000000  00000000  00031f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  00034cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017e90  00000000  00000000  00036e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010825  00000000  00000000  0004ec90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000870ba  00000000  00000000  0005f4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e656f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046d4  00000000  00000000  000e65ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	08004a74 	.word	0x08004a74

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	08004a74 	.word	0x08004a74

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <HAL_Init+0x28>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <HAL_Init+0x28>)
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000250:	2003      	movs	r0, #3
 8000252:	f000 f8f3 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000256:	2000      	movs	r0, #0
 8000258:	f004 fa78 	bl	800474c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025c:	f004 fa3e 	bl	80046dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000260:	2300      	movs	r3, #0
}
 8000262:	4618      	mov	r0, r3
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40022000 	.word	0x40022000

0800026c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	461a      	mov	r2, r3
 8000276:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4413      	add	r3, r2
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <HAL_IncTick+0x20>)
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	20000004 	.word	0x20000004
 800028c:	20001178 	.word	0x20001178

08000290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <HAL_GetTick+0x10>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	20001178 	.word	0x20001178

080002a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ac:	f7ff fff0 	bl	8000290 <HAL_GetTick>
 80002b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002bc:	d005      	beq.n	80002ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002be:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_Delay+0x40>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	461a      	mov	r2, r3
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002ca:	bf00      	nop
 80002cc:	f7ff ffe0 	bl	8000290 <HAL_GetTick>
 80002d0:	4602      	mov	r2, r0
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d8f7      	bhi.n	80002cc <HAL_Delay+0x28>
  {
  }
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000004 	.word	0x20000004

080002e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000304:	4013      	ands	r3, r2
 8000306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800031a:	4a04      	ldr	r2, [pc, #16]	; (800032c <__NVIC_SetPriorityGrouping+0x44>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	60d3      	str	r3, [r2, #12]
}
 8000320:	bf00      	nop
 8000322:	3714      	adds	r7, #20
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <__NVIC_GetPriorityGrouping+0x18>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	0a1b      	lsrs	r3, r3, #8
 800033a:	f003 0307 	and.w	r3, r3, #7
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	2b00      	cmp	r3, #0
 800035c:	db0b      	blt.n	8000376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f003 021f 	and.w	r2, r3, #31
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <__NVIC_EnableIRQ+0x34>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	095b      	lsrs	r3, r3, #5
 800036c:	2001      	movs	r0, #1
 800036e:	fa00 f202 	lsl.w	r2, r0, r2
 8000372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	e000e100 	.word	0xe000e100

08000384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	db0a      	blt.n	80003ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	b2da      	uxtb	r2, r3
 800039c:	490c      	ldr	r1, [pc, #48]	; (80003d0 <__NVIC_SetPriority+0x4c>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ac:	e00a      	b.n	80003c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4908      	ldr	r1, [pc, #32]	; (80003d4 <__NVIC_SetPriority+0x50>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	3b04      	subs	r3, #4
 80003bc:	0112      	lsls	r2, r2, #4
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	761a      	strb	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000e100 	.word	0xe000e100
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b089      	sub	sp, #36	; 0x24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	f1c3 0307 	rsb	r3, r3, #7
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	bf28      	it	cs
 80003f6:	2304      	movcs	r3, #4
 80003f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	3304      	adds	r3, #4
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d902      	bls.n	8000408 <NVIC_EncodePriority+0x30>
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	3b03      	subs	r3, #3
 8000406:	e000      	b.n	800040a <NVIC_EncodePriority+0x32>
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	f04f 32ff 	mov.w	r2, #4294967295
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	43da      	mvns	r2, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	401a      	ands	r2, r3
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000420:	f04f 31ff 	mov.w	r1, #4294967295
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	43d9      	mvns	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000430:	4313      	orrs	r3, r2
         );
}
 8000432:	4618      	mov	r0, r3
 8000434:	3724      	adds	r7, #36	; 0x24
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff4f 	bl	80002e8 <__NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff64 	bl	8000330 <__NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ffb2 	bl	80003d8 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff81 	bl	8000384 <__NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff57 	bl	800034c <__NVIC_EnableIRQ>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d005      	beq.n	80004ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2204      	movs	r2, #4
 80004c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004c4:	2301      	movs	r3, #1
 80004c6:	73fb      	strb	r3, [r7, #15]
 80004c8:	e0d6      	b.n	8000678 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f022 020e 	bic.w	r2, r2, #14
 80004d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f022 0201 	bic.w	r2, r2, #1
 80004e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	461a      	mov	r2, r3
 80004f0:	4b64      	ldr	r3, [pc, #400]	; (8000684 <HAL_DMA_Abort_IT+0x1dc>)
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d958      	bls.n	80005a8 <HAL_DMA_Abort_IT+0x100>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a63      	ldr	r2, [pc, #396]	; (8000688 <HAL_DMA_Abort_IT+0x1e0>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d04f      	beq.n	80005a0 <HAL_DMA_Abort_IT+0xf8>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a61      	ldr	r2, [pc, #388]	; (800068c <HAL_DMA_Abort_IT+0x1e4>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d048      	beq.n	800059c <HAL_DMA_Abort_IT+0xf4>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a60      	ldr	r2, [pc, #384]	; (8000690 <HAL_DMA_Abort_IT+0x1e8>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d040      	beq.n	8000596 <HAL_DMA_Abort_IT+0xee>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a5e      	ldr	r2, [pc, #376]	; (8000694 <HAL_DMA_Abort_IT+0x1ec>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d038      	beq.n	8000590 <HAL_DMA_Abort_IT+0xe8>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a5d      	ldr	r2, [pc, #372]	; (8000698 <HAL_DMA_Abort_IT+0x1f0>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d030      	beq.n	800058a <HAL_DMA_Abort_IT+0xe2>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a5b      	ldr	r2, [pc, #364]	; (800069c <HAL_DMA_Abort_IT+0x1f4>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d028      	beq.n	8000584 <HAL_DMA_Abort_IT+0xdc>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a53      	ldr	r2, [pc, #332]	; (8000684 <HAL_DMA_Abort_IT+0x1dc>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d020      	beq.n	800057e <HAL_DMA_Abort_IT+0xd6>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a57      	ldr	r2, [pc, #348]	; (80006a0 <HAL_DMA_Abort_IT+0x1f8>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d019      	beq.n	800057a <HAL_DMA_Abort_IT+0xd2>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a56      	ldr	r2, [pc, #344]	; (80006a4 <HAL_DMA_Abort_IT+0x1fc>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d012      	beq.n	8000576 <HAL_DMA_Abort_IT+0xce>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a54      	ldr	r2, [pc, #336]	; (80006a8 <HAL_DMA_Abort_IT+0x200>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d00a      	beq.n	8000570 <HAL_DMA_Abort_IT+0xc8>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a53      	ldr	r2, [pc, #332]	; (80006ac <HAL_DMA_Abort_IT+0x204>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d102      	bne.n	800056a <HAL_DMA_Abort_IT+0xc2>
 8000564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000568:	e01b      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 800056a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056e:	e018      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 8000570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000574:	e015      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 8000576:	2310      	movs	r3, #16
 8000578:	e013      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 800057a:	2301      	movs	r3, #1
 800057c:	e011      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 800057e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000582:	e00e      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 8000584:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000588:	e00b      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	e008      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 8000590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000594:	e005      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 8000596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059a:	e002      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 800059c:	2310      	movs	r3, #16
 800059e:	e000      	b.n	80005a2 <HAL_DMA_Abort_IT+0xfa>
 80005a0:	2301      	movs	r3, #1
 80005a2:	4a43      	ldr	r2, [pc, #268]	; (80006b0 <HAL_DMA_Abort_IT+0x208>)
 80005a4:	6053      	str	r3, [r2, #4]
 80005a6:	e057      	b.n	8000658 <HAL_DMA_Abort_IT+0x1b0>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a36      	ldr	r2, [pc, #216]	; (8000688 <HAL_DMA_Abort_IT+0x1e0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d04f      	beq.n	8000652 <HAL_DMA_Abort_IT+0x1aa>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a35      	ldr	r2, [pc, #212]	; (800068c <HAL_DMA_Abort_IT+0x1e4>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d048      	beq.n	800064e <HAL_DMA_Abort_IT+0x1a6>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a33      	ldr	r2, [pc, #204]	; (8000690 <HAL_DMA_Abort_IT+0x1e8>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d040      	beq.n	8000648 <HAL_DMA_Abort_IT+0x1a0>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a32      	ldr	r2, [pc, #200]	; (8000694 <HAL_DMA_Abort_IT+0x1ec>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d038      	beq.n	8000642 <HAL_DMA_Abort_IT+0x19a>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a30      	ldr	r2, [pc, #192]	; (8000698 <HAL_DMA_Abort_IT+0x1f0>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d030      	beq.n	800063c <HAL_DMA_Abort_IT+0x194>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a2f      	ldr	r2, [pc, #188]	; (800069c <HAL_DMA_Abort_IT+0x1f4>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d028      	beq.n	8000636 <HAL_DMA_Abort_IT+0x18e>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <HAL_DMA_Abort_IT+0x1dc>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d020      	beq.n	8000630 <HAL_DMA_Abort_IT+0x188>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <HAL_DMA_Abort_IT+0x1f8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d019      	beq.n	800062c <HAL_DMA_Abort_IT+0x184>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <HAL_DMA_Abort_IT+0x1fc>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d012      	beq.n	8000628 <HAL_DMA_Abort_IT+0x180>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <HAL_DMA_Abort_IT+0x200>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d00a      	beq.n	8000622 <HAL_DMA_Abort_IT+0x17a>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a26      	ldr	r2, [pc, #152]	; (80006ac <HAL_DMA_Abort_IT+0x204>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d102      	bne.n	800061c <HAL_DMA_Abort_IT+0x174>
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	e01b      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	e018      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000626:	e015      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000628:	2310      	movs	r3, #16
 800062a:	e013      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 800062c:	2301      	movs	r3, #1
 800062e:	e011      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000634:	e00e      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000636:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800063a:	e00b      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	e008      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	e005      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800064c:	e002      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 800064e:	2310      	movs	r3, #16
 8000650:	e000      	b.n	8000654 <HAL_DMA_Abort_IT+0x1ac>
 8000652:	2301      	movs	r3, #1
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_DMA_Abort_IT+0x20c>)
 8000656:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	4798      	blx	r3
    } 
  }
  return status;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40020080 	.word	0x40020080
 8000688:	40020008 	.word	0x40020008
 800068c:	4002001c 	.word	0x4002001c
 8000690:	40020030 	.word	0x40020030
 8000694:	40020044 	.word	0x40020044
 8000698:	40020058 	.word	0x40020058
 800069c:	4002006c 	.word	0x4002006c
 80006a0:	40020408 	.word	0x40020408
 80006a4:	4002041c 	.word	0x4002041c
 80006a8:	40020430 	.word	0x40020430
 80006ac:	40020444 	.word	0x40020444
 80006b0:	40020400 	.word	0x40020400
 80006b4:	40020000 	.word	0x40020000

080006b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b08b      	sub	sp, #44	; 0x2c
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ca:	e133      	b.n	8000934 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006cc:	2201      	movs	r2, #1
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	4013      	ands	r3, r2
 80006de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	f040 8122 	bne.w	800092e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	2b12      	cmp	r3, #18
 80006f0:	d034      	beq.n	800075c <HAL_GPIO_Init+0xa4>
 80006f2:	2b12      	cmp	r3, #18
 80006f4:	d80d      	bhi.n	8000712 <HAL_GPIO_Init+0x5a>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d02b      	beq.n	8000752 <HAL_GPIO_Init+0x9a>
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d804      	bhi.n	8000708 <HAL_GPIO_Init+0x50>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d031      	beq.n	8000766 <HAL_GPIO_Init+0xae>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d01c      	beq.n	8000740 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000706:	e048      	b.n	800079a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000708:	2b03      	cmp	r3, #3
 800070a:	d043      	beq.n	8000794 <HAL_GPIO_Init+0xdc>
 800070c:	2b11      	cmp	r3, #17
 800070e:	d01b      	beq.n	8000748 <HAL_GPIO_Init+0x90>
          break;
 8000710:	e043      	b.n	800079a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000712:	4a8f      	ldr	r2, [pc, #572]	; (8000950 <HAL_GPIO_Init+0x298>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d026      	beq.n	8000766 <HAL_GPIO_Init+0xae>
 8000718:	4a8d      	ldr	r2, [pc, #564]	; (8000950 <HAL_GPIO_Init+0x298>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d806      	bhi.n	800072c <HAL_GPIO_Init+0x74>
 800071e:	4a8d      	ldr	r2, [pc, #564]	; (8000954 <HAL_GPIO_Init+0x29c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d020      	beq.n	8000766 <HAL_GPIO_Init+0xae>
 8000724:	4a8c      	ldr	r2, [pc, #560]	; (8000958 <HAL_GPIO_Init+0x2a0>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d01d      	beq.n	8000766 <HAL_GPIO_Init+0xae>
          break;
 800072a:	e036      	b.n	800079a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800072c:	4a8b      	ldr	r2, [pc, #556]	; (800095c <HAL_GPIO_Init+0x2a4>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d019      	beq.n	8000766 <HAL_GPIO_Init+0xae>
 8000732:	4a8b      	ldr	r2, [pc, #556]	; (8000960 <HAL_GPIO_Init+0x2a8>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d016      	beq.n	8000766 <HAL_GPIO_Init+0xae>
 8000738:	4a8a      	ldr	r2, [pc, #552]	; (8000964 <HAL_GPIO_Init+0x2ac>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d013      	beq.n	8000766 <HAL_GPIO_Init+0xae>
          break;
 800073e:	e02c      	b.n	800079a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	623b      	str	r3, [r7, #32]
          break;
 8000746:	e028      	b.n	800079a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	3304      	adds	r3, #4
 800074e:	623b      	str	r3, [r7, #32]
          break;
 8000750:	e023      	b.n	800079a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	3308      	adds	r3, #8
 8000758:	623b      	str	r3, [r7, #32]
          break;
 800075a:	e01e      	b.n	800079a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	330c      	adds	r3, #12
 8000762:	623b      	str	r3, [r7, #32]
          break;
 8000764:	e019      	b.n	800079a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d102      	bne.n	8000774 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800076e:	2304      	movs	r3, #4
 8000770:	623b      	str	r3, [r7, #32]
          break;
 8000772:	e012      	b.n	800079a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d105      	bne.n	8000788 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800077c:	2308      	movs	r3, #8
 800077e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	69fa      	ldr	r2, [r7, #28]
 8000784:	611a      	str	r2, [r3, #16]
          break;
 8000786:	e008      	b.n	800079a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000788:	2308      	movs	r3, #8
 800078a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	615a      	str	r2, [r3, #20]
          break;
 8000792:	e002      	b.n	800079a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
          break;
 8000798:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	2bff      	cmp	r3, #255	; 0xff
 800079e:	d801      	bhi.n	80007a4 <HAL_GPIO_Init+0xec>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	e001      	b.n	80007a8 <HAL_GPIO_Init+0xf0>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3304      	adds	r3, #4
 80007a8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	2bff      	cmp	r3, #255	; 0xff
 80007ae:	d802      	bhi.n	80007b6 <HAL_GPIO_Init+0xfe>
 80007b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	e002      	b.n	80007bc <HAL_GPIO_Init+0x104>
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	3b08      	subs	r3, #8
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	210f      	movs	r1, #15
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	401a      	ands	r2, r3
 80007ce:	6a39      	ldr	r1, [r7, #32]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	431a      	orrs	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 80a2 	beq.w	800092e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007ea:	4b5f      	ldr	r3, [pc, #380]	; (8000968 <HAL_GPIO_Init+0x2b0>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a5e      	ldr	r2, [pc, #376]	; (8000968 <HAL_GPIO_Init+0x2b0>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b5c      	ldr	r3, [pc, #368]	; (8000968 <HAL_GPIO_Init+0x2b0>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000802:	4a5a      	ldr	r2, [pc, #360]	; (800096c <HAL_GPIO_Init+0x2b4>)
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	3302      	adds	r3, #2
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000812:	f003 0303 	and.w	r3, r3, #3
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	220f      	movs	r2, #15
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4013      	ands	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a51      	ldr	r2, [pc, #324]	; (8000970 <HAL_GPIO_Init+0x2b8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d01f      	beq.n	800086e <HAL_GPIO_Init+0x1b6>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4a50      	ldr	r2, [pc, #320]	; (8000974 <HAL_GPIO_Init+0x2bc>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d019      	beq.n	800086a <HAL_GPIO_Init+0x1b2>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a4f      	ldr	r2, [pc, #316]	; (8000978 <HAL_GPIO_Init+0x2c0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d013      	beq.n	8000866 <HAL_GPIO_Init+0x1ae>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a4e      	ldr	r2, [pc, #312]	; (800097c <HAL_GPIO_Init+0x2c4>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d00d      	beq.n	8000862 <HAL_GPIO_Init+0x1aa>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a4d      	ldr	r2, [pc, #308]	; (8000980 <HAL_GPIO_Init+0x2c8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0x1a6>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a4c      	ldr	r2, [pc, #304]	; (8000984 <HAL_GPIO_Init+0x2cc>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d101      	bne.n	800085a <HAL_GPIO_Init+0x1a2>
 8000856:	2305      	movs	r3, #5
 8000858:	e00a      	b.n	8000870 <HAL_GPIO_Init+0x1b8>
 800085a:	2306      	movs	r3, #6
 800085c:	e008      	b.n	8000870 <HAL_GPIO_Init+0x1b8>
 800085e:	2304      	movs	r3, #4
 8000860:	e006      	b.n	8000870 <HAL_GPIO_Init+0x1b8>
 8000862:	2303      	movs	r3, #3
 8000864:	e004      	b.n	8000870 <HAL_GPIO_Init+0x1b8>
 8000866:	2302      	movs	r3, #2
 8000868:	e002      	b.n	8000870 <HAL_GPIO_Init+0x1b8>
 800086a:	2301      	movs	r3, #1
 800086c:	e000      	b.n	8000870 <HAL_GPIO_Init+0x1b8>
 800086e:	2300      	movs	r3, #0
 8000870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000872:	f002 0203 	and.w	r2, r2, #3
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	4093      	lsls	r3, r2
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000880:	493a      	ldr	r1, [pc, #232]	; (800096c <HAL_GPIO_Init+0x2b4>)
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	089b      	lsrs	r3, r3, #2
 8000886:	3302      	adds	r3, #2
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000896:	2b00      	cmp	r3, #0
 8000898:	d006      	beq.n	80008a8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800089a:	4b3b      	ldr	r3, [pc, #236]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	493a      	ldr	r1, [pc, #232]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]
 80008a6:	e006      	b.n	80008b6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008a8:	4b37      	ldr	r3, [pc, #220]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	43db      	mvns	r3, r3
 80008b0:	4935      	ldr	r1, [pc, #212]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008b2:	4013      	ands	r3, r2
 80008b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008c2:	4b31      	ldr	r3, [pc, #196]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	4930      	ldr	r1, [pc, #192]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	604b      	str	r3, [r1, #4]
 80008ce:	e006      	b.n	80008de <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	43db      	mvns	r3, r3
 80008d8:	492b      	ldr	r1, [pc, #172]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008da:	4013      	ands	r3, r2
 80008dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	4926      	ldr	r1, [pc, #152]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	608b      	str	r3, [r1, #8]
 80008f6:	e006      	b.n	8000906 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	43db      	mvns	r3, r3
 8000900:	4921      	ldr	r1, [pc, #132]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 8000902:	4013      	ands	r3, r2
 8000904:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 8000914:	68da      	ldr	r2, [r3, #12]
 8000916:	491c      	ldr	r1, [pc, #112]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	60cb      	str	r3, [r1, #12]
 800091e:	e006      	b.n	800092e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 8000922:	68da      	ldr	r2, [r3, #12]
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	43db      	mvns	r3, r3
 8000928:	4917      	ldr	r1, [pc, #92]	; (8000988 <HAL_GPIO_Init+0x2d0>)
 800092a:	4013      	ands	r3, r2
 800092c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	3301      	adds	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	fa22 f303 	lsr.w	r3, r2, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	f47f aec4 	bne.w	80006cc <HAL_GPIO_Init+0x14>
  }
}
 8000944:	bf00      	nop
 8000946:	372c      	adds	r7, #44	; 0x2c
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	10210000 	.word	0x10210000
 8000954:	10110000 	.word	0x10110000
 8000958:	10120000 	.word	0x10120000
 800095c:	10310000 	.word	0x10310000
 8000960:	10320000 	.word	0x10320000
 8000964:	10220000 	.word	0x10220000
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	40011000 	.word	0x40011000
 800097c:	40011400 	.word	0x40011400
 8000980:	40011800 	.word	0x40011800
 8000984:	40011c00 	.word	0x40011c00
 8000988:	40010400 	.word	0x40010400

0800098c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
 8000998:	4613      	mov	r3, r2
 800099a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800099c:	787b      	ldrb	r3, [r7, #1]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009a2:	887a      	ldrh	r2, [r7, #2]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009a8:	e003      	b.n	80009b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009aa:	887b      	ldrh	r3, [r7, #2]
 80009ac:	041a      	lsls	r2, r3, #16
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	611a      	str	r2, [r3, #16]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009d4:	887a      	ldrh	r2, [r7, #2]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80009da:	e002      	b.n	80009e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009dc:	887a      	ldrh	r2, [r7, #2]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	611a      	str	r2, [r3, #16]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e26c      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8087 	beq.w	8000b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a0c:	4b92      	ldr	r3, [pc, #584]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 030c 	and.w	r3, r3, #12
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d00c      	beq.n	8000a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a18:	4b8f      	ldr	r3, [pc, #572]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 030c 	and.w	r3, r3, #12
 8000a20:	2b08      	cmp	r3, #8
 8000a22:	d112      	bne.n	8000a4a <HAL_RCC_OscConfig+0x5e>
 8000a24:	4b8c      	ldr	r3, [pc, #560]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a30:	d10b      	bne.n	8000a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a32:	4b89      	ldr	r3, [pc, #548]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d06c      	beq.n	8000b18 <HAL_RCC_OscConfig+0x12c>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d168      	bne.n	8000b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e246      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a52:	d106      	bne.n	8000a62 <HAL_RCC_OscConfig+0x76>
 8000a54:	4b80      	ldr	r3, [pc, #512]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a7f      	ldr	r2, [pc, #508]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e02e      	b.n	8000ac0 <HAL_RCC_OscConfig+0xd4>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10c      	bne.n	8000a84 <HAL_RCC_OscConfig+0x98>
 8000a6a:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a7a      	ldr	r2, [pc, #488]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	4b78      	ldr	r3, [pc, #480]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a77      	ldr	r2, [pc, #476]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e01d      	b.n	8000ac0 <HAL_RCC_OscConfig+0xd4>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a8c:	d10c      	bne.n	8000aa8 <HAL_RCC_OscConfig+0xbc>
 8000a8e:	4b72      	ldr	r3, [pc, #456]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a71      	ldr	r2, [pc, #452]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	4b6f      	ldr	r3, [pc, #444]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a6e      	ldr	r2, [pc, #440]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e00b      	b.n	8000ac0 <HAL_RCC_OscConfig+0xd4>
 8000aa8:	4b6b      	ldr	r3, [pc, #428]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a6a      	ldr	r2, [pc, #424]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	4b68      	ldr	r3, [pc, #416]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a67      	ldr	r2, [pc, #412]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d013      	beq.n	8000af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fbe2 	bl	8000290 <HAL_GetTick>
 8000acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ace:	e008      	b.n	8000ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad0:	f7ff fbde 	bl	8000290 <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b64      	cmp	r3, #100	; 0x64
 8000adc:	d901      	bls.n	8000ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e1fa      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae2:	4b5d      	ldr	r3, [pc, #372]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d0f0      	beq.n	8000ad0 <HAL_RCC_OscConfig+0xe4>
 8000aee:	e014      	b.n	8000b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f7ff fbce 	bl	8000290 <HAL_GetTick>
 8000af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000af6:	e008      	b.n	8000b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000af8:	f7ff fbca 	bl	8000290 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b64      	cmp	r3, #100	; 0x64
 8000b04:	d901      	bls.n	8000b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b06:	2303      	movs	r3, #3
 8000b08:	e1e6      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0a:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1f0      	bne.n	8000af8 <HAL_RCC_OscConfig+0x10c>
 8000b16:	e000      	b.n	8000b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d063      	beq.n	8000bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b26:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 030c 	and.w	r3, r3, #12
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00b      	beq.n	8000b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b32:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d11c      	bne.n	8000b78 <HAL_RCC_OscConfig+0x18c>
 8000b3e:	4b46      	ldr	r3, [pc, #280]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d116      	bne.n	8000b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4a:	4b43      	ldr	r3, [pc, #268]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <HAL_RCC_OscConfig+0x176>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d001      	beq.n	8000b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e1ba      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b62:	4b3d      	ldr	r3, [pc, #244]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	4939      	ldr	r1, [pc, #228]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	4313      	orrs	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b76:	e03a      	b.n	8000bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d020      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b80:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_RCC_OscConfig+0x270>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fb83 	bl	8000290 <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b8c:	e008      	b.n	8000ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b8e:	f7ff fb7f 	bl	8000290 <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e19b      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f0      	beq.n	8000b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	4927      	ldr	r1, [pc, #156]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
 8000bc0:	e015      	b.n	8000bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_RCC_OscConfig+0x270>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fb62 	bl	8000290 <HAL_GetTick>
 8000bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bce:	e008      	b.n	8000be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bd0:	f7ff fb5e 	bl	8000290 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d901      	bls.n	8000be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bde:	2303      	movs	r3, #3
 8000be0:	e17a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1f0      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d03a      	beq.n	8000c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d019      	beq.n	8000c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_RCC_OscConfig+0x274>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c08:	f7ff fb42 	bl	8000290 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c10:	f7ff fb3e 	bl	8000290 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e15a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fb0a 	bl	8001248 <RCC_Delay>
 8000c34:	e01c      	b.n	8000c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_RCC_OscConfig+0x274>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3c:	f7ff fb28 	bl	8000290 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c42:	e00f      	b.n	8000c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c44:	f7ff fb24 	bl	8000290 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d908      	bls.n	8000c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e140      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
 8000c56:	bf00      	nop
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	42420000 	.word	0x42420000
 8000c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	4b9e      	ldr	r3, [pc, #632]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1e9      	bne.n	8000c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 80a6 	beq.w	8000dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c82:	4b97      	ldr	r3, [pc, #604]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10d      	bne.n	8000caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b94      	ldr	r3, [pc, #592]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a93      	ldr	r2, [pc, #588]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b91      	ldr	r3, [pc, #580]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000caa:	4b8e      	ldr	r3, [pc, #568]	; (8000ee4 <HAL_RCC_OscConfig+0x4f8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d118      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cb6:	4b8b      	ldr	r3, [pc, #556]	; (8000ee4 <HAL_RCC_OscConfig+0x4f8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a8a      	ldr	r2, [pc, #552]	; (8000ee4 <HAL_RCC_OscConfig+0x4f8>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cc2:	f7ff fae5 	bl	8000290 <HAL_GetTick>
 8000cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cca:	f7ff fae1 	bl	8000290 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b64      	cmp	r3, #100	; 0x64
 8000cd6:	d901      	bls.n	8000cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e0fd      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cdc:	4b81      	ldr	r3, [pc, #516]	; (8000ee4 <HAL_RCC_OscConfig+0x4f8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f0      	beq.n	8000cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d106      	bne.n	8000cfe <HAL_RCC_OscConfig+0x312>
 8000cf0:	4b7b      	ldr	r3, [pc, #492]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000cf2:	6a1b      	ldr	r3, [r3, #32]
 8000cf4:	4a7a      	ldr	r2, [pc, #488]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6213      	str	r3, [r2, #32]
 8000cfc:	e02d      	b.n	8000d5a <HAL_RCC_OscConfig+0x36e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x334>
 8000d06:	4b76      	ldr	r3, [pc, #472]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	4a75      	ldr	r2, [pc, #468]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	6213      	str	r3, [r2, #32]
 8000d12:	4b73      	ldr	r3, [pc, #460]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d14:	6a1b      	ldr	r3, [r3, #32]
 8000d16:	4a72      	ldr	r2, [pc, #456]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d18:	f023 0304 	bic.w	r3, r3, #4
 8000d1c:	6213      	str	r3, [r2, #32]
 8000d1e:	e01c      	b.n	8000d5a <HAL_RCC_OscConfig+0x36e>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	2b05      	cmp	r3, #5
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0x356>
 8000d28:	4b6d      	ldr	r3, [pc, #436]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a6c      	ldr	r2, [pc, #432]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6213      	str	r3, [r2, #32]
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	4a69      	ldr	r2, [pc, #420]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	6213      	str	r3, [r2, #32]
 8000d40:	e00b      	b.n	8000d5a <HAL_RCC_OscConfig+0x36e>
 8000d42:	4b67      	ldr	r3, [pc, #412]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	4a66      	ldr	r2, [pc, #408]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	6213      	str	r3, [r2, #32]
 8000d4e:	4b64      	ldr	r3, [pc, #400]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	4a63      	ldr	r2, [pc, #396]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d54:	f023 0304 	bic.w	r3, r3, #4
 8000d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d015      	beq.n	8000d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d62:	f7ff fa95 	bl	8000290 <HAL_GetTick>
 8000d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d68:	e00a      	b.n	8000d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6a:	f7ff fa91 	bl	8000290 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e0ab      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d80:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000d82:	6a1b      	ldr	r3, [r3, #32]
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0ee      	beq.n	8000d6a <HAL_RCC_OscConfig+0x37e>
 8000d8c:	e014      	b.n	8000db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fa7f 	bl	8000290 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d94:	e00a      	b.n	8000dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d96:	f7ff fa7b 	bl	8000290 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d901      	bls.n	8000dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e095      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dac:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1ee      	bne.n	8000d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000db8:	7dfb      	ldrb	r3, [r7, #23]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d105      	bne.n	8000dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dbe:	4b48      	ldr	r3, [pc, #288]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a47      	ldr	r2, [pc, #284]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8081 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd4:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 030c 	and.w	r3, r3, #12
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	d061      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d146      	bne.n	8000e76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de8:	4b3f      	ldr	r3, [pc, #252]	; (8000ee8 <HAL_RCC_OscConfig+0x4fc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dee:	f7ff fa4f 	bl	8000290 <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000df6:	f7ff fa4b 	bl	8000290 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e067      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e08:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f0      	bne.n	8000df6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1c:	d108      	bne.n	8000e30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	492d      	ldr	r1, [pc, #180]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a19      	ldr	r1, [r3, #32]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	430b      	orrs	r3, r1
 8000e42:	4927      	ldr	r1, [pc, #156]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_RCC_OscConfig+0x4fc>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fa1f 	bl	8000290 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e56:	f7ff fa1b 	bl	8000290 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e037      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x46a>
 8000e74:	e02f      	b.n	8000ed6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_RCC_OscConfig+0x4fc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fa08 	bl	8000290 <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e84:	f7ff fa04 	bl	8000290 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e020      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x498>
 8000ea2:	e018      	b.n	8000ed6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69db      	ldr	r3, [r3, #28]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d101      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e013      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d001      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40007000 	.word	0x40007000
 8000ee8:	42420060 	.word	0x42420060

08000eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e0d0      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d910      	bls.n	8000f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 0207 	bic.w	r2, r3, #7
 8000f16:	4965      	ldr	r1, [pc, #404]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d001      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e0b8      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d020      	beq.n	8000f7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d005      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f48:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	4a52      	ldr	r2, [pc, #328]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	494d      	ldr	r1, [pc, #308]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d040      	beq.n	800100c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d107      	bne.n	8000fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f92:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d115      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e07f      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d107      	bne.n	8000fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e073      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e06b      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f023 0203 	bic.w	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	4936      	ldr	r1, [pc, #216]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fdc:	f7ff f958 	bl	8000290 <HAL_GetTick>
 8000fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fe4:	f7ff f954 	bl	8000290 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e053      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 020c 	and.w	r2, r3, #12
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	429a      	cmp	r2, r3
 800100a:	d1eb      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d210      	bcs.n	800103c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f023 0207 	bic.w	r2, r3, #7
 8001022:	4922      	ldr	r1, [pc, #136]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	4313      	orrs	r3, r2
 8001028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d001      	beq.n	800103c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e032      	b.n	80010a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4916      	ldr	r1, [pc, #88]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	2b00      	cmp	r3, #0
 8001064:	d009      	beq.n	800107a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	490e      	ldr	r1, [pc, #56]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800107a:	f000 f821 	bl	80010c0 <HAL_RCC_GetSysClockFreq>
 800107e:	4601      	mov	r1, r0
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_RCC_ClockConfig+0x1c8>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	fa21 f303 	lsr.w	r3, r1, r3
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_RCC_ClockConfig+0x1d0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fb56 	bl	800474c <HAL_InitTick>

  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	08004b54 	.word	0x08004b54
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010c0:	b490      	push	{r4, r7}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010c6:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010c8:	1d3c      	adds	r4, r7, #4
 80010ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_RCC_GetSysClockFreq+0xb4>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_RCC_GetSysClockFreq+0xb8>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d002      	beq.n	8001100 <HAL_RCC_GetSysClockFreq+0x40>
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d003      	beq.n	8001106 <HAL_RCC_GetSysClockFreq+0x46>
 80010fe:	e02d      	b.n	800115c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001102:	623b      	str	r3, [r7, #32]
      break;
 8001104:	e02d      	b.n	8001162 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	0c9b      	lsrs	r3, r3, #18
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001112:	4413      	add	r3, r2
 8001114:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001118:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	0c5b      	lsrs	r3, r3, #17
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001132:	4413      	add	r3, r2
 8001134:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001138:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <HAL_RCC_GetSysClockFreq+0xbc>)
 800113e:	fb02 f203 	mul.w	r2, r2, r3
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	fbb2 f3f3 	udiv	r3, r2, r3
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
 800114a:	e004      	b.n	8001156 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	623b      	str	r3, [r7, #32]
      break;
 800115a:	e002      	b.n	8001162 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_RCC_GetSysClockFreq+0xbc>)
 800115e:	623b      	str	r3, [r7, #32]
      break;
 8001160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001162:	6a3b      	ldr	r3, [r7, #32]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bc90      	pop	{r4, r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	08004a8c 	.word	0x08004a8c
 8001174:	08004a9c 	.word	0x08004a9c
 8001178:	40021000 	.word	0x40021000
 800117c:	007a1200 	.word	0x007a1200
 8001180:	003d0900 	.word	0x003d0900

08001184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_RCC_GetHCLKFreq+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	2000000c 	.word	0x2000000c

08001198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800119c:	f7ff fff2 	bl	8001184 <HAL_RCC_GetHCLKFreq>
 80011a0:	4601      	mov	r1, r0
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	08004b64 	.word	0x08004b64

080011c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011c4:	f7ff ffde 	bl	8001184 <HAL_RCC_GetHCLKFreq>
 80011c8:	4601      	mov	r1, r0
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	0adb      	lsrs	r3, r3, #11
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08004b64 	.word	0x08004b64

080011e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	220f      	movs	r2, #15
 80011f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_RCC_GetClockConfig+0x58>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0203 	and.w	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_RCC_GetClockConfig+0x58>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_RCC_GetClockConfig+0x58>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_RCC_GetClockConfig+0x58>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_RCC_GetClockConfig+0x5c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0207 	and.w	r2, r3, #7
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40022000 	.word	0x40022000

08001248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <RCC_Delay+0x34>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <RCC_Delay+0x38>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0a5b      	lsrs	r3, r3, #9
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	fb02 f303 	mul.w	r3, r2, r3
 8001262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001264:	bf00      	nop
  }
  while (Delay --);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1e5a      	subs	r2, r3, #1
 800126a:	60fa      	str	r2, [r7, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f9      	bne.n	8001264 <RCC_Delay+0x1c>
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000000c 	.word	0x2000000c
 8001280:	10624dd3 	.word	0x10624dd3

08001284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e01d      	b.n	80012d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f815 	bl	80012da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2202      	movs	r2, #2
 80012b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	f000 f962 	bl	800158c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0201 	orr.w	r2, r2, #1
 8001302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b06      	cmp	r3, #6
 8001314:	d007      	beq.n	8001326 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b02      	cmp	r3, #2
 8001346:	d122      	bne.n	800138e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b02      	cmp	r3, #2
 8001354:	d11b      	bne.n	800138e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f06f 0202 	mvn.w	r2, #2
 800135e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f8ed 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 800137a:	e005      	b.n	8001388 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f8e0 	bl	8001542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f8ef 	bl	8001566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b04      	cmp	r3, #4
 800139a:	d122      	bne.n	80013e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d11b      	bne.n	80013e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f06f 0204 	mvn.w	r2, #4
 80013b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f8c3 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 80013ce:	e005      	b.n	80013dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f8b6 	bl	8001542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f8c5 	bl	8001566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d122      	bne.n	8001436 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11b      	bne.n	8001436 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f06f 0208 	mvn.w	r2, #8
 8001406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f899 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 8001422:	e005      	b.n	8001430 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f88c 	bl	8001542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f89b 	bl	8001566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b10      	cmp	r3, #16
 8001442:	d122      	bne.n	800148a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b10      	cmp	r3, #16
 8001450:	d11b      	bne.n	800148a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f06f 0210 	mvn.w	r2, #16
 800145a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2208      	movs	r2, #8
 8001460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f86f 	bl	8001554 <HAL_TIM_IC_CaptureCallback>
 8001476:	e005      	b.n	8001484 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f862 	bl	8001542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f871 	bl	8001566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10e      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0201 	mvn.w	r2, #1
 80014ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f003 f8fb 	bl	80046ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c0:	2b80      	cmp	r3, #128	; 0x80
 80014c2:	d10e      	bne.n	80014e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	2b80      	cmp	r3, #128	; 0x80
 80014d0:	d107      	bne.n	80014e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f8d8 	bl	8001692 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ec:	2b40      	cmp	r3, #64	; 0x40
 80014ee:	d10e      	bne.n	800150e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	d107      	bne.n	800150e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f835 	bl	8001578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b20      	cmp	r3, #32
 800151a:	d10e      	bne.n	800153a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b20      	cmp	r3, #32
 8001528:	d107      	bne.n	800153a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0220 	mvn.w	r2, #32
 8001532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f8a3 	bl	8001680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
	...

0800158c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a33      	ldr	r2, [pc, #204]	; (800166c <TIM_Base_SetConfig+0xe0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d013      	beq.n	80015cc <TIM_Base_SetConfig+0x40>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a32      	ldr	r2, [pc, #200]	; (8001670 <TIM_Base_SetConfig+0xe4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00f      	beq.n	80015cc <TIM_Base_SetConfig+0x40>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b2:	d00b      	beq.n	80015cc <TIM_Base_SetConfig+0x40>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a2f      	ldr	r2, [pc, #188]	; (8001674 <TIM_Base_SetConfig+0xe8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d007      	beq.n	80015cc <TIM_Base_SetConfig+0x40>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <TIM_Base_SetConfig+0xec>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d003      	beq.n	80015cc <TIM_Base_SetConfig+0x40>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a2d      	ldr	r2, [pc, #180]	; (800167c <TIM_Base_SetConfig+0xf0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d108      	bne.n	80015de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <TIM_Base_SetConfig+0xe0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <TIM_Base_SetConfig+0x82>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a21      	ldr	r2, [pc, #132]	; (8001670 <TIM_Base_SetConfig+0xe4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00f      	beq.n	800160e <TIM_Base_SetConfig+0x82>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f4:	d00b      	beq.n	800160e <TIM_Base_SetConfig+0x82>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <TIM_Base_SetConfig+0xe8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <TIM_Base_SetConfig+0x82>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <TIM_Base_SetConfig+0xec>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d003      	beq.n	800160e <TIM_Base_SetConfig+0x82>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <TIM_Base_SetConfig+0xf0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d108      	bne.n	8001620 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <TIM_Base_SetConfig+0xe0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d003      	beq.n	8001654 <TIM_Base_SetConfig+0xc8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <TIM_Base_SetConfig+0xe4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d103      	bne.n	800165c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	615a      	str	r2, [r3, #20]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40013400 	.word	0x40013400
 8001674:	40000400 	.word	0x40000400
 8001678:	40000800 	.word	0x40000800
 800167c:	40000c00 	.word	0x40000c00

08001680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e03f      	b.n	8001736 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f003 f920 	bl	8004910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fb41 	bl	8001d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800170c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800171c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b088      	sub	sp, #32
 8001742:	af02      	add	r7, sp, #8
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4613      	mov	r3, r2
 800174c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b20      	cmp	r3, #32
 800175c:	f040 8083 	bne.w	8001866 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_UART_Transmit+0x2e>
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e07b      	b.n	8001868 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_UART_Transmit+0x40>
 800177a:	2302      	movs	r3, #2
 800177c:	e074      	b.n	8001868 <HAL_UART_Transmit+0x12a>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2221      	movs	r2, #33	; 0x21
 8001790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001794:	f7fe fd7c 	bl	8000290 <HAL_GetTick>
 8001798:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	88fa      	ldrh	r2, [r7, #6]
 80017a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017a6:	e042      	b.n	800182e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017be:	d122      	bne.n	8001806 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2200      	movs	r2, #0
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f967 	bl	8001a9e <UART_WaitOnFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e046      	b.n	8001868 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d103      	bne.n	80017fe <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3302      	adds	r3, #2
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	e017      	b.n	800182e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3301      	adds	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	e013      	b.n	800182e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2200      	movs	r2, #0
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f944 	bl	8001a9e <UART_WaitOnFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e023      	b.n	8001868 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001832:	b29b      	uxth	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1b7      	bne.n	80017a8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2200      	movs	r2, #0
 8001840:	2140      	movs	r1, #64	; 0x40
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f92b 	bl	8001a9e <UART_WaitOnFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e00a      	b.n	8001868 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001866:	2302      	movs	r3, #2
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10d      	bne.n	80018c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_UART_IRQHandler+0x52>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f9d7 	bl	8001c6e <UART_Receive_IT>
      return;
 80018c0:	e0cc      	b.n	8001a5c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80ab 	beq.w	8001a20 <HAL_UART_IRQHandler+0x1b0>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_UART_IRQHandler+0x70>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80a0 	beq.w	8001a20 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_UART_IRQHandler+0x90>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f8:	f043 0201 	orr.w	r2, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <HAL_UART_IRQHandler+0xb0>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	f043 0202 	orr.w	r2, r3, #2
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <HAL_UART_IRQHandler+0xd0>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	f043 0204 	orr.w	r2, r3, #4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00a      	beq.n	8001960 <HAL_UART_IRQHandler+0xf0>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	f043 0208 	orr.w	r2, r3, #8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d078      	beq.n	8001a5a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_UART_IRQHandler+0x112>
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	f003 0320 	and.w	r3, r3, #32
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f976 	bl	8001c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_UART_IRQHandler+0x13a>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d031      	beq.n	8001a0e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8c1 	bl	8001b32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d023      	beq.n	8001a06 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d013      	beq.n	80019fe <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019da:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_UART_IRQHandler+0x1f4>)
 80019dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd60 	bl	80004a8 <HAL_DMA_Abort_IT>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d016      	beq.n	8001a1c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019f8:	4610      	mov	r0, r2
 80019fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019fc:	e00e      	b.n	8001a1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f844 	bl	8001a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a04:	e00a      	b.n	8001a1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f840 	bl	8001a8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a0c:	e006      	b.n	8001a1c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f83c 	bl	8001a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001a1a:	e01e      	b.n	8001a5a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a1c:	bf00      	nop
    return;
 8001a1e:	e01c      	b.n	8001a5a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_UART_IRQHandler+0x1cc>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8ad 	bl	8001b94 <UART_Transmit_IT>
    return;
 8001a3a:	e00f      	b.n	8001a5c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <HAL_UART_IRQHandler+0x1ec>
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8f4 	bl	8001c3e <UART_EndTransmit_IT>
    return;
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <HAL_UART_IRQHandler+0x1ec>
    return;
 8001a5a:	bf00      	nop
  }
}
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	08001b6d 	.word	0x08001b6d

08001a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aae:	e02c      	b.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab6:	d028      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <UART_WaitOnFlagUntilTimeout+0x30>
 8001abe:	f7fe fbe7 	bl	8000290 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d21d      	bcs.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001adc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e00f      	b.n	8001b2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4013      	ands	r3, r2
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d0c3      	beq.n	8001ab0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff ff80 	bl	8001a8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b21      	cmp	r3, #33	; 0x21
 8001ba6:	d144      	bne.n	8001c32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb0:	d11a      	bne.n	8001be8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bc6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	1c9a      	adds	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	621a      	str	r2, [r3, #32]
 8001bda:	e00e      	b.n	8001bfa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	621a      	str	r2, [r3, #32]
 8001be6:	e008      	b.n	8001bfa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	1c59      	adds	r1, r3, #1
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6211      	str	r1, [r2, #32]
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4619      	mov	r1, r3
 8001c08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff02 	bl	8001a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b22      	cmp	r3, #34	; 0x22
 8001c80:	d171      	bne.n	8001d66 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8a:	d123      	bne.n	8001cd4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10e      	bne.n	8001cb8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	1c9a      	adds	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cb6:	e029      	b.n	8001d0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	e01b      	b.n	8001d0c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10a      	bne.n	8001cf2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6858      	ldr	r0, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	1c59      	adds	r1, r3, #1
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6291      	str	r1, [r2, #40]	; 0x28
 8001cec:	b2c2      	uxtb	r2, r0
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e00c      	b.n	8001d0c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	1c58      	adds	r0, r3, #1
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6288      	str	r0, [r1, #40]	; 0x28
 8001d04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d120      	bne.n	8001d62 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0220 	bic.w	r2, r2, #32
 8001d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff fe8e 	bl	8001a7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e002      	b.n	8001d68 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
  }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001daa:	f023 030c 	bic.w	r3, r3, #12
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a52      	ldr	r2, [pc, #328]	; (8001f1c <UART_SetConfig+0x1ac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d14e      	bne.n	8001e76 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001dd8:	f7ff f9f2 	bl	80011c0 <HAL_RCC_GetPCLK2Freq>
 8001ddc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009a      	lsls	r2, r3, #2
 8001de8:	441a      	add	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	4a4a      	ldr	r2, [pc, #296]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	0119      	lsls	r1, r3, #4
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e14:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001e16:	fba3 0302 	umull	r0, r3, r3, r2
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2064      	movs	r0, #100	; 0x64
 8001e1e:	fb00 f303 	mul.w	r3, r0, r3
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	3332      	adds	r3, #50	; 0x32
 8001e28:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	4419      	add	r1, r3
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009a      	lsls	r2, r3, #2
 8001e40:	441a      	add	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2064      	movs	r0, #100	; 0x64
 8001e56:	fb00 f303 	mul.w	r3, r0, r3
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	440a      	add	r2, r1
 8001e72:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001e74:	e04d      	b.n	8001f12 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e76:	f7ff f98f 	bl	8001198 <HAL_RCC_GetPCLK1Freq>
 8001e7a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	441a      	add	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	4a23      	ldr	r2, [pc, #140]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	0119      	lsls	r1, r3, #4
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009a      	lsls	r2, r3, #2
 8001ea6:	441a      	add	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb2:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001eb4:	fba3 0302 	umull	r0, r3, r3, r2
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	2064      	movs	r0, #100	; 0x64
 8001ebc:	fb00 f303 	mul.w	r3, r0, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	3332      	adds	r3, #50	; 0x32
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ed2:	4419      	add	r1, r3
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	441a      	add	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001eec:	fba3 0302 	umull	r0, r3, r3, r2
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	2064      	movs	r0, #100	; 0x64
 8001ef4:	fb00 f303 	mul.w	r3, r0, r3
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	3332      	adds	r3, #50	; 0x32
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <UART_SetConfig+0x1b0>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	440a      	add	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	51eb851f 	.word	0x51eb851f

08001f24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	2b84      	cmp	r3, #132	; 0x84
 8001f38:	d005      	beq.n	8001f46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	3303      	adds	r3, #3
 8001f44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f58:	f3ef 8305 	mrs	r3, IPSR
 8001f5c:	607b      	str	r3, [r7, #4]
  return(result);
 8001f5e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f78:	f001 f816 	bl	8002fa8 <vTaskStartScheduler>
  
  return osOK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f84:	b087      	sub	sp, #28
 8001f86:	af02      	add	r7, sp, #8
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685c      	ldr	r4, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f98:	b29e      	uxth	r6, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ffbf 	bl	8001f24 <makeFreeRtosPriority>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	9200      	str	r2, [sp, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	f000 fe98 	bl	8002cec <xTaskCreate>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fd0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <osDelay+0x16>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	e000      	b.n	8001fe8 <osDelay+0x18>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 ffa9 	bl	8002f40 <vTaskDelay>
  
  return osOK;
 8001fee:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d110      	bne.n	800202a <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8002008:	2203      	movs	r2, #3
 800200a:	2100      	movs	r1, #0
 800200c:	2001      	movs	r0, #1
 800200e:	f000 f9b3 	bl	8002378 <xQueueGenericCreate>
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <osSemaphoreCreate+0x2e>
 800201a:	2300      	movs	r3, #0
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 fa33 	bl	800248c <xQueueGenericSend>
    return sema;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	e006      	b.n	8002038 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f9f9 	bl	8002428 <xQueueCreateCountingSemaphore>
 8002036:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	e03a      	b.n	80020ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002062:	d103      	bne.n	800206c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002064:	f04f 33ff 	mov.w	r3, #4294967295
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e009      	b.n	8002080 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d006      	beq.n	8002080 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <osSemaphoreWait+0x40>
      ticks = 1;
 800207c:	2301      	movs	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002080:	f7ff ff67 	bl	8001f52 <inHandlerMode>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d017      	beq.n	80020ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	461a      	mov	r2, r3
 8002090:	2100      	movs	r1, #0
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fc86 	bl	80029a4 <xQueueReceiveFromISR>
 8002098:	4603      	mov	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d001      	beq.n	80020a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800209e:	23ff      	movs	r3, #255	; 0xff
 80020a0:	e015      	b.n	80020ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d011      	beq.n	80020cc <osSemaphoreWait+0x8c>
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <osSemaphoreWait+0x98>)
 80020aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	e008      	b.n	80020cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fb69 	bl	8002794 <xQueueSemaphoreTake>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d001      	beq.n	80020cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80020c8:	23ff      	movs	r3, #255	; 0xff
 80020ca:	e000      	b.n	80020ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000ed04 	.word	0xe000ed04

080020dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80020ec:	f7ff ff31 	bl	8001f52 <inHandlerMode>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fabf 	bl	8002680 <xQueueGiveFromISR>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d001      	beq.n	800210c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	e017      	b.n	800213c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d013      	beq.n	800213a <osSemaphoreRelease+0x5e>
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <osSemaphoreRelease+0x68>)
 8002114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	e00a      	b.n	800213a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002124:	2300      	movs	r3, #0
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f9ae 	bl	800248c <xQueueGenericSend>
 8002130:	4603      	mov	r3, r0
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002136:	23ff      	movs	r3, #255	; 0xff
 8002138:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	e000ed04 	.word	0xe000ed04

08002148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f103 0208 	add.w	r2, r3, #8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f103 0208 	add.w	r2, r3, #8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f103 0208 	add.w	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d103      	bne.n	8002204 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e00c      	b.n	800221e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3308      	adds	r3, #8
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e002      	b.n	8002212 <vListInsert+0x2e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d2f6      	bcs.n	800220c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6892      	ldr	r2, [r2, #8]
 800226a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6852      	ldr	r2, [r2, #4]
 8002274:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d103      	bne.n	8002288 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr
	...

080022a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d109      	bne.n	80022d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	e7fe      	b.n	80022ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80022d0:	f001 fd5a 	bl	8003d88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	441a      	add	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	3b01      	subs	r3, #1
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	441a      	add	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d114      	bne.n	8002350 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01a      	beq.n	8002364 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3310      	adds	r3, #16
 8002332:	4618      	mov	r0, r3
 8002334:	f001 f862 	bl	80033fc <xTaskRemoveFromEventList>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d012      	beq.n	8002364 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <xQueueGenericReset+0xcc>)
 8002340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	e009      	b.n	8002364 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3310      	adds	r3, #16
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fef7 	bl	8002148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3324      	adds	r3, #36	; 0x24
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fef2 	bl	8002148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002364:	f001 fd3e 	bl	8003de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <xQueueGenericCreate+0x28>
 800238c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002390:	f383 8811 	msr	BASEPRI, r3
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	f3bf 8f4f 	dsb	sy
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e7fe      	b.n	800239e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d102      	bne.n	80023ac <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	e004      	b.n	80023b6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3348      	adds	r3, #72	; 0x48
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fdda 	bl	8003f74 <pvPortMalloc>
 80023c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	3348      	adds	r3, #72	; 0x48
 80023cc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f805 	bl	80023ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023e0:	69bb      	ldr	r3, [r7, #24]
	}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e002      	b.n	800240c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002418:	2101      	movs	r1, #1
 800241a:	69b8      	ldr	r0, [r7, #24]
 800241c:	f7ff ff44 	bl	80022a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <xQueueCreateCountingSemaphore+0x24>
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	e7fe      	b.n	800244a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	d909      	bls.n	8002468 <xQueueCreateCountingSemaphore+0x40>
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e7fe      	b.n	8002466 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002468:	2202      	movs	r2, #2
 800246a:	2100      	movs	r1, #0
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff83 	bl	8002378 <xQueueGenericCreate>
 8002472:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002480:	697b      	ldr	r3, [r7, #20]
	}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08e      	sub	sp, #56	; 0x38
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <xQueueGenericSend+0x30>
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	e7fe      	b.n	80024ba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <xQueueGenericSend+0x3e>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <xQueueGenericSend+0x42>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueGenericSend+0x44>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <xQueueGenericSend+0x5c>
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
 80024e6:	e7fe      	b.n	80024e6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d103      	bne.n	80024f6 <xQueueGenericSend+0x6a>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <xQueueGenericSend+0x6e>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericSend+0x70>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <xQueueGenericSend+0x88>
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	e7fe      	b.n	8002512 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002514:	f001 f90e 	bl	8003734 <xTaskGetSchedulerState>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <xQueueGenericSend+0x98>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <xQueueGenericSend+0x9c>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <xQueueGenericSend+0x9e>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <xQueueGenericSend+0xb6>
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	e7fe      	b.n	8002540 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002542:	f001 fc21 	bl	8003d88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	429a      	cmp	r2, r3
 8002550:	d302      	bcc.n	8002558 <xQueueGenericSend+0xcc>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d129      	bne.n	80025ac <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800255e:	f000 fab5 	bl	8002acc <prvCopyDataToQueue>
 8002562:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	3324      	adds	r3, #36	; 0x24
 8002570:	4618      	mov	r0, r3
 8002572:	f000 ff43 	bl	80033fc <xTaskRemoveFromEventList>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800257c:	4b3f      	ldr	r3, [pc, #252]	; (800267c <xQueueGenericSend+0x1f0>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	e00a      	b.n	80025a4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <xQueueGenericSend+0x1f0>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025a4:	f001 fc1e 	bl	8003de4 <vPortExitCritical>
				return pdPASS;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e063      	b.n	8002674 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025b2:	f001 fc17 	bl	8003de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e05c      	b.n	8002674 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 ff7b 	bl	80034c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ce:	f001 fc09 	bl	8003de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025d2:	f000 fd2f 	bl	8003034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025d6:	f001 fbd7 	bl	8003d88 <vPortEnterCritical>
 80025da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d103      	bne.n	80025f0 <xQueueGenericSend+0x164>
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d103      	bne.n	8002606 <xQueueGenericSend+0x17a>
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002606:	f001 fbed 	bl	8003de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800260a:	1d3a      	adds	r2, r7, #4
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ff6a 	bl	80034ec <xTaskCheckForTimeOut>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d124      	bne.n	8002668 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800261e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002620:	f000 fb4c 	bl	8002cbc <prvIsQueueFull>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d018      	beq.n	800265c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	3310      	adds	r3, #16
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f000 febe 	bl	80033b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800263a:	f000 fad7 	bl	8002bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800263e:	f000 fd07 	bl	8003050 <xTaskResumeAll>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f af7c 	bne.w	8002542 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <xQueueGenericSend+0x1f0>)
 800264c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	f3bf 8f6f 	isb	sy
 800265a:	e772      	b.n	8002542 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800265c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800265e:	f000 fac5 	bl	8002bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002662:	f000 fcf5 	bl	8003050 <xTaskResumeAll>
 8002666:	e76c      	b.n	8002542 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266a:	f000 fabf 	bl	8002bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800266e:	f000 fcef 	bl	8003050 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002672:	2300      	movs	r3, #0
		}
	}
}
 8002674:	4618      	mov	r0, r3
 8002676:	3738      	adds	r7, #56	; 0x38
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <xQueueGiveFromISR+0x28>
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	e7fe      	b.n	80026a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <xQueueGiveFromISR+0x44>
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e7fe      	b.n	80026c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <xQueueGiveFromISR+0x54>
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <xQueueGiveFromISR+0x58>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <xQueueGiveFromISR+0x5a>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <xQueueGiveFromISR+0x72>
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e7fe      	b.n	80026f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026f2:	f001 fc03 	bl	8003efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026f6:	f3ef 8211 	mrs	r2, BASEPRI
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	617a      	str	r2, [r7, #20]
 800270c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800270e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271e:	429a      	cmp	r2, r3
 8002720:	d22b      	bcs.n	800277a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d112      	bne.n	8002764 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	3324      	adds	r3, #36	; 0x24
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fe56 	bl	80033fc <xTaskRemoveFromEventList>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00e      	beq.n	8002774 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e007      	b.n	8002774 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002768:	3301      	adds	r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	b25a      	sxtb	r2, r3
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002774:	2301      	movs	r3, #1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	e001      	b.n	800277e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800278a:	4618      	mov	r0, r3
 800278c:	3738      	adds	r7, #56	; 0x38
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	623b      	str	r3, [r7, #32]
 80027c2:	e7fe      	b.n	80027c2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <xQueueSemaphoreTake+0x4c>
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	e7fe      	b.n	80027de <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027e0:	f000 ffa8 	bl	8003734 <xTaskGetSchedulerState>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <xQueueSemaphoreTake+0x5c>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <xQueueSemaphoreTake+0x60>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <xQueueSemaphoreTake+0x62>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d109      	bne.n	800280e <xQueueSemaphoreTake+0x7a>
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e7fe      	b.n	800280c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800280e:	f001 fabb 	bl	8003d88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d024      	beq.n	8002868 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d104      	bne.n	8002838 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800282e:	f001 f947 	bl	8003ac0 <pvTaskIncrementMutexHeldCount>
 8002832:	4602      	mov	r2, r0
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00f      	beq.n	8002860 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	3310      	adds	r3, #16
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fdd9 	bl	80033fc <xTaskRemoveFromEventList>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <xQueueSemaphoreTake+0x20c>)
 8002852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002860:	f001 fac0 	bl	8003de4 <vPortExitCritical>
				return pdPASS;
 8002864:	2301      	movs	r3, #1
 8002866:	e096      	b.n	8002996 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d110      	bne.n	8002890 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	2b00      	cmp	r3, #0
 8002872:	d009      	beq.n	8002888 <xQueueSemaphoreTake+0xf4>
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e7fe      	b.n	8002886 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002888:	f001 faac 	bl	8003de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800288c:	2300      	movs	r3, #0
 800288e:	e082      	b.n	8002996 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fe10 	bl	80034c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028a4:	f001 fa9e 	bl	8003de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028a8:	f000 fbc4 	bl	8003034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028ac:	f001 fa6c 	bl	8003d88 <vPortEnterCritical>
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d103      	bne.n	80028c6 <xQueueSemaphoreTake+0x132>
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d103      	bne.n	80028dc <xQueueSemaphoreTake+0x148>
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028dc:	f001 fa82 	bl	8003de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e0:	463a      	mov	r2, r7
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fdff 	bl	80034ec <xTaskCheckForTimeOut>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d132      	bne.n	800295a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028f6:	f000 f9cb 	bl	8002c90 <prvIsQueueEmpty>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d026      	beq.n	800294e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002908:	f001 fa3e 	bl	8003d88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 ff2d 	bl	8003770 <xTaskPriorityInherit>
 8002916:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002918:	f001 fa64 	bl	8003de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	3324      	adds	r3, #36	; 0x24
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd45 	bl	80033b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800292a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800292c:	f000 f95e 	bl	8002bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002930:	f000 fb8e 	bl	8003050 <xTaskResumeAll>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	f47f af69 	bne.w	800280e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <xQueueSemaphoreTake+0x20c>)
 800293e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	e75f      	b.n	800280e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800294e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002950:	f000 f94c 	bl	8002bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002954:	f000 fb7c 	bl	8003050 <xTaskResumeAll>
 8002958:	e759      	b.n	800280e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800295a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800295c:	f000 f946 	bl	8002bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002960:	f000 fb76 	bl	8003050 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002966:	f000 f993 	bl	8002c90 <prvIsQueueEmpty>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	f43f af4e 	beq.w	800280e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00d      	beq.n	8002994 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002978:	f001 fa06 	bl	8003d88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800297c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800297e:	f000 f88e 	bl	8002a9e <prvGetDisinheritPriorityAfterTimeout>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fffa 	bl	8003984 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002990:	f001 fa28 	bl	8003de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002994:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002996:	4618      	mov	r0, r3
 8002998:	3738      	adds	r7, #56	; 0x38
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <xQueueReceiveFromISR+0x2a>
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	e7fe      	b.n	80029cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <xQueueReceiveFromISR+0x38>
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <xQueueReceiveFromISR+0x3c>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <xQueueReceiveFromISR+0x3e>
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <xQueueReceiveFromISR+0x56>
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	e7fe      	b.n	80029f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029fa:	f001 fa7f 	bl	8003efc <vPortValidateInterruptPriority>
	__asm volatile
 80029fe:	f3ef 8211 	mrs	r2, BASEPRI
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	61ba      	str	r2, [r7, #24]
 8002a14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002a16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d02f      	beq.n	8002a86 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a34:	f000 f8b4 	bl	8002ba0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d112      	bne.n	8002a70 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a54:	3310      	adds	r3, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fcd0 	bl	80033fc <xTaskRemoveFromEventList>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00e      	beq.n	8002a80 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e007      	b.n	8002a80 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a74:	3301      	adds	r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	b25a      	sxtb	r2, r3
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002a80:	2301      	movs	r3, #1
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
 8002a84:	e001      	b.n	8002a8a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3738      	adds	r7, #56	; 0x38
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1c3 0307 	rsb	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e001      	b.n	8002ac0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
	}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d14d      	bne.n	8002b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fec0 	bl	800387c <xTaskPriorityDisinherit>
 8002afc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	e043      	b.n	8002b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d119      	bne.n	8002b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6898      	ldr	r0, [r3, #8]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	461a      	mov	r2, r3
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	f001 ff98 	bl	8004a4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	441a      	add	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d32b      	bcc.n	8002b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	e026      	b.n	8002b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68d8      	ldr	r0, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	f001 ff7e 	bl	8004a4c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	425b      	negs	r3, r3
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	425b      	negs	r3, r3
 8002b76:	441a      	add	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d105      	bne.n	8002b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b96:	697b      	ldr	r3, [r7, #20]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	441a      	add	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d303      	bcc.n	8002bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68d9      	ldr	r1, [r3, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6838      	ldr	r0, [r7, #0]
 8002be0:	f001 ff34 	bl	8004a4c <memcpy>
	}
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bf4:	f001 f8c8 	bl	8003d88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c00:	e011      	b.n	8002c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3324      	adds	r3, #36	; 0x24
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fbf4 	bl	80033fc <xTaskRemoveFromEventList>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c1a:	f000 fcc7 	bl	80035ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	dce9      	bgt.n	8002c02 <prvUnlockQueue+0x16>
 8002c2e:	e000      	b.n	8002c32 <prvUnlockQueue+0x46>
					break;
 8002c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	22ff      	movs	r2, #255	; 0xff
 8002c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c3a:	f001 f8d3 	bl	8003de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c3e:	f001 f8a3 	bl	8003d88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c4a:	e011      	b.n	8002c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d012      	beq.n	8002c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3310      	adds	r3, #16
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fbcf 	bl	80033fc <xTaskRemoveFromEventList>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c64:	f000 fca2 	bl	80035ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c68:	7bbb      	ldrb	r3, [r7, #14]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	dce9      	bgt.n	8002c4c <prvUnlockQueue+0x60>
 8002c78:	e000      	b.n	8002c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	22ff      	movs	r2, #255	; 0xff
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c84:	f001 f8ae 	bl	8003de4 <vPortExitCritical>
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c98:	f001 f876 	bl	8003d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e001      	b.n	8002cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cae:	f001 f899 	bl	8003de4 <vPortExitCritical>

	return xReturn;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cc4:	f001 f860 	bl	8003d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d102      	bne.n	8002cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e001      	b.n	8002cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cde:	f001 f881 	bl	8003de4 <vPortExitCritical>

	return xReturn;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af04      	add	r7, sp, #16
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 f937 	bl	8003f74 <pvPortMalloc>
 8002d06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00e      	beq.n	8002d2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d0e:	2054      	movs	r0, #84	; 0x54
 8002d10:	f001 f930 	bl	8003f74 <pvPortMalloc>
 8002d14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
 8002d22:	e005      	b.n	8002d30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d24:	6978      	ldr	r0, [r7, #20]
 8002d26:	f001 f9e7 	bl	80040f8 <vPortFree>
 8002d2a:	e001      	b.n	8002d30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d013      	beq.n	8002d5e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9303      	str	r3, [sp, #12]
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	9302      	str	r3, [sp, #8]
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f80e 	bl	8002d6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d52:	69f8      	ldr	r0, [r7, #28]
 8002d54:	f000 f88a 	bl	8002e6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	e002      	b.n	8002d64 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d64:	69bb      	ldr	r3, [r7, #24]
	}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b088      	sub	sp, #32
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d86:	3b01      	subs	r3, #1
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f023 0307 	bic.w	r3, r3, #7
 8002d94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <prvInitialiseNewTask+0x46>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e7fe      	b.n	8002db2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e012      	b.n	8002de0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	7819      	ldrb	r1, [r3, #0]
 8002dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3334      	adds	r3, #52	; 0x34
 8002dca:	460a      	mov	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	d9e9      	bls.n	8002dba <prvInitialiseNewTask+0x4c>
 8002de6:	e000      	b.n	8002dea <prvInitialiseNewTask+0x7c>
		{
			break;
 8002de8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d901      	bls.n	8002dfc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002df8:	2306      	movs	r3, #6
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	3304      	adds	r3, #4
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f9b7 	bl	8002186 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f9b2 	bl	8002186 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	f1c3 0207 	rsb	r2, r3, #7
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	69b8      	ldr	r0, [r7, #24]
 8002e4c:	f000 feb2 	bl	8003bb4 <pxPortInitialiseStack>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e62:	bf00      	nop
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e74:	f000 ff88 	bl	8003d88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <prvAddNewTaskToReadyList+0xb8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <prvAddNewTaskToReadyList+0xb8>)
 8002e80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <prvAddNewTaskToReadyList+0xbc>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e8a:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <prvAddNewTaskToReadyList+0xbc>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <prvAddNewTaskToReadyList+0xb8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d110      	bne.n	8002eba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e98:	f000 fbac 	bl	80035f4 <prvInitialiseTaskLists>
 8002e9c:	e00d      	b.n	8002eba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e9e:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <prvAddNewTaskToReadyList+0xc0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <prvAddNewTaskToReadyList+0xbc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d802      	bhi.n	8002eba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <prvAddNewTaskToReadyList+0xbc>)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <prvAddNewTaskToReadyList+0xc4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <prvAddNewTaskToReadyList+0xc4>)
 8002ec2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2201      	movs	r2, #1
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <prvAddNewTaskToReadyList+0xc8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	4a18      	ldr	r2, [pc, #96]	; (8002f34 <prvAddNewTaskToReadyList+0xc8>)
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <prvAddNewTaskToReadyList+0xcc>)
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f7ff f956 	bl	800219e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ef2:	f000 ff77 	bl	8003de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <prvAddNewTaskToReadyList+0xc0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00e      	beq.n	8002f1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <prvAddNewTaskToReadyList+0xbc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d207      	bcs.n	8002f1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <prvAddNewTaskToReadyList+0xd0>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2000012c 	.word	0x2000012c
 8002f28:	2000002c 	.word	0x2000002c
 8002f2c:	20000138 	.word	0x20000138
 8002f30:	20000148 	.word	0x20000148
 8002f34:	20000134 	.word	0x20000134
 8002f38:	20000030 	.word	0x20000030
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <vTaskDelay+0x60>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <vTaskDelay+0x2e>
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	e7fe      	b.n	8002f6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f6e:	f000 f861 	bl	8003034 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fdb7 	bl	8003ae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f7a:	f000 f869 	bl	8003050 <xTaskResumeAll>
 8002f7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d107      	bne.n	8002f96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <vTaskDelay+0x64>)
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000154 	.word	0x20000154
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <vTaskStartScheduler+0x74>)
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	4919      	ldr	r1, [pc, #100]	; (8003020 <vTaskStartScheduler+0x78>)
 8002fbc:	4819      	ldr	r0, [pc, #100]	; (8003024 <vTaskStartScheduler+0x7c>)
 8002fbe:	f7ff fe95 	bl	8002cec <xTaskCreate>
 8002fc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d115      	bne.n	8002ff6 <vTaskStartScheduler+0x4e>
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fdc:	4b12      	ldr	r3, [pc, #72]	; (8003028 <vTaskStartScheduler+0x80>)
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <vTaskStartScheduler+0x84>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <vTaskStartScheduler+0x88>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ff0:	f000 fe5a 	bl	8003ca8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002ff4:	e00d      	b.n	8003012 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d109      	bne.n	8003012 <vTaskStartScheduler+0x6a>
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	e7fe      	b.n	8003010 <vTaskStartScheduler+0x68>
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000150 	.word	0x20000150
 8003020:	08004aa0 	.word	0x08004aa0
 8003024:	080035c5 	.word	0x080035c5
 8003028:	2000014c 	.word	0x2000014c
 800302c:	20000138 	.word	0x20000138
 8003030:	20000130 	.word	0x20000130

08003034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <vTaskSuspendAll+0x18>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a03      	ldr	r2, [pc, #12]	; (800304c <vTaskSuspendAll+0x18>)
 8003040:	6013      	str	r3, [r2, #0]
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000154 	.word	0x20000154

08003050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <xTaskResumeAll+0x114>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <xTaskResumeAll+0x2a>
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	e7fe      	b.n	8003078 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800307a:	f000 fe85 	bl	8003d88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800307e:	4b39      	ldr	r3, [pc, #228]	; (8003164 <xTaskResumeAll+0x114>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	4a37      	ldr	r2, [pc, #220]	; (8003164 <xTaskResumeAll+0x114>)
 8003086:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <xTaskResumeAll+0x114>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d161      	bne.n	8003154 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <xTaskResumeAll+0x118>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05d      	beq.n	8003154 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003098:	e02e      	b.n	80030f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800309a:	4b34      	ldr	r3, [pc, #208]	; (800316c <xTaskResumeAll+0x11c>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3318      	adds	r3, #24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f8d4 	bl	8002254 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f8cf 	bl	8002254 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	2201      	movs	r2, #1
 80030bc:	409a      	lsls	r2, r3
 80030be:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <xTaskResumeAll+0x120>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <xTaskResumeAll+0x120>)
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <xTaskResumeAll+0x124>)
 80030d6:	441a      	add	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7ff f85d 	bl	800219e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <xTaskResumeAll+0x128>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <xTaskResumeAll+0x12c>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <xTaskResumeAll+0x11c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1cc      	bne.n	800309a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003106:	f000 faf1 	bl	80036ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <xTaskResumeAll+0x130>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003116:	f000 f837 	bl	8003188 <xTaskIncrementTick>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003120:	4b16      	ldr	r3, [pc, #88]	; (800317c <xTaskResumeAll+0x12c>)
 8003122:	2201      	movs	r2, #1
 8003124:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3b01      	subs	r3, #1
 800312a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f1      	bne.n	8003116 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003132:	4b13      	ldr	r3, [pc, #76]	; (8003180 <xTaskResumeAll+0x130>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <xTaskResumeAll+0x12c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003140:	2301      	movs	r3, #1
 8003142:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <xTaskResumeAll+0x134>)
 8003146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003154:	f000 fe46 	bl	8003de4 <vPortExitCritical>

	return xAlreadyYielded;
 8003158:	68bb      	ldr	r3, [r7, #8]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000154 	.word	0x20000154
 8003168:	2000012c 	.word	0x2000012c
 800316c:	200000ec 	.word	0x200000ec
 8003170:	20000134 	.word	0x20000134
 8003174:	20000030 	.word	0x20000030
 8003178:	2000002c 	.word	0x2000002c
 800317c:	20000140 	.word	0x20000140
 8003180:	2000013c 	.word	0x2000013c
 8003184:	e000ed04 	.word	0xe000ed04

08003188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003192:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <xTaskIncrementTick+0x14c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 808c 	bne.w	80032b4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800319c:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <xTaskIncrementTick+0x150>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031a4:	4a4c      	ldr	r2, [pc, #304]	; (80032d8 <xTaskIncrementTick+0x150>)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11f      	bne.n	80031f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031b0:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <xTaskIncrementTick+0x154>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <xTaskIncrementTick+0x46>
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	e7fe      	b.n	80031cc <xTaskIncrementTick+0x44>
 80031ce:	4b43      	ldr	r3, [pc, #268]	; (80032dc <xTaskIncrementTick+0x154>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <xTaskIncrementTick+0x158>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a40      	ldr	r2, [pc, #256]	; (80032dc <xTaskIncrementTick+0x154>)
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4a40      	ldr	r2, [pc, #256]	; (80032e0 <xTaskIncrementTick+0x158>)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <xTaskIncrementTick+0x15c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4a3e      	ldr	r2, [pc, #248]	; (80032e4 <xTaskIncrementTick+0x15c>)
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	f000 fa7e 	bl	80036ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031f0:	4b3d      	ldr	r3, [pc, #244]	; (80032e8 <xTaskIncrementTick+0x160>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d34d      	bcc.n	8003296 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031fa:	4b38      	ldr	r3, [pc, #224]	; (80032dc <xTaskIncrementTick+0x154>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <xTaskIncrementTick+0x80>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <xTaskIncrementTick+0x82>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320e:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <xTaskIncrementTick+0x160>)
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	601a      	str	r2, [r3, #0]
					break;
 8003216:	e03e      	b.n	8003296 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <xTaskIncrementTick+0x154>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d203      	bcs.n	8003238 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003230:	4a2d      	ldr	r2, [pc, #180]	; (80032e8 <xTaskIncrementTick+0x160>)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6013      	str	r3, [r2, #0]
						break;
 8003236:	e02e      	b.n	8003296 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	3304      	adds	r3, #4
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff f809 	bl	8002254 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3318      	adds	r3, #24
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f800 	bl	8002254 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	4b23      	ldr	r3, [pc, #140]	; (80032ec <xTaskIncrementTick+0x164>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	4a22      	ldr	r2, [pc, #136]	; (80032ec <xTaskIncrementTick+0x164>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <xTaskIncrementTick+0x168>)
 8003274:	441a      	add	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3304      	adds	r3, #4
 800327a:	4619      	mov	r1, r3
 800327c:	4610      	mov	r0, r2
 800327e:	f7fe ff8e 	bl	800219e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <xTaskIncrementTick+0x16c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	429a      	cmp	r2, r3
 800328e:	d3b4      	bcc.n	80031fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003294:	e7b1      	b.n	80031fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <xTaskIncrementTick+0x16c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	4914      	ldr	r1, [pc, #80]	; (80032f0 <xTaskIncrementTick+0x168>)
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d907      	bls.n	80032be <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e004      	b.n	80032be <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <xTaskIncrementTick+0x170>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <xTaskIncrementTick+0x170>)
 80032bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <xTaskIncrementTick+0x174>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80032c6:	2301      	movs	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032ca:	697b      	ldr	r3, [r7, #20]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000154 	.word	0x20000154
 80032d8:	20000130 	.word	0x20000130
 80032dc:	200000e4 	.word	0x200000e4
 80032e0:	200000e8 	.word	0x200000e8
 80032e4:	20000144 	.word	0x20000144
 80032e8:	2000014c 	.word	0x2000014c
 80032ec:	20000134 	.word	0x20000134
 80032f0:	20000030 	.word	0x20000030
 80032f4:	2000002c 	.word	0x2000002c
 80032f8:	2000013c 	.word	0x2000013c
 80032fc:	20000140 	.word	0x20000140

08003300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <vTaskSwitchContext+0xa0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800330e:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <vTaskSwitchContext+0xa4>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003314:	e03e      	b.n	8003394 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003316:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <vTaskSwitchContext+0xa4>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <vTaskSwitchContext+0xa8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800332a:	7afb      	ldrb	r3, [r7, #11]
 800332c:	f1c3 031f 	rsb	r3, r3, #31
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	491e      	ldr	r1, [pc, #120]	; (80033ac <vTaskSwitchContext+0xac>)
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	e7fe      	b.n	8003358 <vTaskSwitchContext+0x58>
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a11      	ldr	r2, [pc, #68]	; (80033ac <vTaskSwitchContext+0xac>)
 8003366:	4413      	add	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	3308      	adds	r3, #8
 800337c:	429a      	cmp	r2, r3
 800337e:	d104      	bne.n	800338a <vTaskSwitchContext+0x8a>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <vTaskSwitchContext+0xb0>)
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000154 	.word	0x20000154
 80033a4:	20000140 	.word	0x20000140
 80033a8:	20000134 	.word	0x20000134
 80033ac:	20000030 	.word	0x20000030
 80033b0:	2000002c 	.word	0x2000002c

080033b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <vTaskPlaceOnEventList+0x24>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	e7fe      	b.n	80033d6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <vTaskPlaceOnEventList+0x44>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3318      	adds	r3, #24
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe feff 	bl	80021e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033e6:	2101      	movs	r1, #1
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	f000 fb7d 	bl	8003ae8 <prvAddCurrentTaskToDelayedList>
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000002c 	.word	0x2000002c

080033fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <xTaskRemoveFromEventList+0x2a>
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e7fe      	b.n	8003424 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3318      	adds	r3, #24
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe ff12 	bl	8002254 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <xTaskRemoveFromEventList+0xac>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11c      	bne.n	8003472 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	3304      	adds	r3, #4
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe ff09 	bl	8002254 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <xTaskRemoveFromEventList+0xb0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	4a16      	ldr	r2, [pc, #88]	; (80034ac <xTaskRemoveFromEventList+0xb0>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <xTaskRemoveFromEventList+0xb4>)
 8003462:	441a      	add	r2, r3
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f7fe fe97 	bl	800219e <vListInsertEnd>
 8003470:	e005      	b.n	800347e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	3318      	adds	r3, #24
 8003476:	4619      	mov	r1, r3
 8003478:	480e      	ldr	r0, [pc, #56]	; (80034b4 <xTaskRemoveFromEventList+0xb8>)
 800347a:	f7fe fe90 	bl	800219e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <xTaskRemoveFromEventList+0xbc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d905      	bls.n	8003498 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <xTaskRemoveFromEventList+0xc0>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e001      	b.n	800349c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800349c:	697b      	ldr	r3, [r7, #20]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000154 	.word	0x20000154
 80034ac:	20000134 	.word	0x20000134
 80034b0:	20000030 	.word	0x20000030
 80034b4:	200000ec 	.word	0x200000ec
 80034b8:	2000002c 	.word	0x2000002c
 80034bc:	20000140 	.word	0x20000140

080034c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <vTaskInternalSetTimeOutState+0x24>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <vTaskInternalSetTimeOutState+0x28>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	605a      	str	r2, [r3, #4]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc80      	pop	{r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000144 	.word	0x20000144
 80034e8:	20000130 	.word	0x20000130

080034ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <xTaskCheckForTimeOut+0x24>
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	e7fe      	b.n	800350e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <xTaskCheckForTimeOut+0x3e>
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e7fe      	b.n	8003528 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800352a:	f000 fc2d 	bl	8003d88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <xTaskCheckForTimeOut+0xb8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d102      	bne.n	800354e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e023      	b.n	8003596 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <xTaskCheckForTimeOut+0xbc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d007      	beq.n	800356a <xTaskCheckForTimeOut+0x7e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	429a      	cmp	r2, r3
 8003562:	d302      	bcc.n	800356a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	e015      	b.n	8003596 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	429a      	cmp	r2, r3
 8003572:	d20b      	bcs.n	800358c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff ff9d 	bl	80034c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	e004      	b.n	8003596 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003596:	f000 fc25 	bl	8003de4 <vPortExitCritical>

	return xReturn;
 800359a:	69fb      	ldr	r3, [r7, #28]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3720      	adds	r7, #32
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000130 	.word	0x20000130
 80035a8:	20000144 	.word	0x20000144

080035ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <vTaskMissedYield+0x14>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000140 	.word	0x20000140

080035c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035cc:	f000 f852 	bl	8003674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <prvIdleTask+0x28>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d9f9      	bls.n	80035cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <prvIdleTask+0x2c>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035e8:	e7f0      	b.n	80035cc <prvIdleTask+0x8>
 80035ea:	bf00      	nop
 80035ec:	20000030 	.word	0x20000030
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	e00c      	b.n	800361a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <prvInitialiseTaskLists+0x60>)
 800360c:	4413      	add	r3, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe fd9a 	bl	8002148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b06      	cmp	r3, #6
 800361e:	d9ef      	bls.n	8003600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003620:	480d      	ldr	r0, [pc, #52]	; (8003658 <prvInitialiseTaskLists+0x64>)
 8003622:	f7fe fd91 	bl	8002148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003626:	480d      	ldr	r0, [pc, #52]	; (800365c <prvInitialiseTaskLists+0x68>)
 8003628:	f7fe fd8e 	bl	8002148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800362c:	480c      	ldr	r0, [pc, #48]	; (8003660 <prvInitialiseTaskLists+0x6c>)
 800362e:	f7fe fd8b 	bl	8002148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003632:	480c      	ldr	r0, [pc, #48]	; (8003664 <prvInitialiseTaskLists+0x70>)
 8003634:	f7fe fd88 	bl	8002148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003638:	480b      	ldr	r0, [pc, #44]	; (8003668 <prvInitialiseTaskLists+0x74>)
 800363a:	f7fe fd85 	bl	8002148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <prvInitialiseTaskLists+0x78>)
 8003640:	4a05      	ldr	r2, [pc, #20]	; (8003658 <prvInitialiseTaskLists+0x64>)
 8003642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <prvInitialiseTaskLists+0x7c>)
 8003646:	4a05      	ldr	r2, [pc, #20]	; (800365c <prvInitialiseTaskLists+0x68>)
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000030 	.word	0x20000030
 8003658:	200000bc 	.word	0x200000bc
 800365c:	200000d0 	.word	0x200000d0
 8003660:	200000ec 	.word	0x200000ec
 8003664:	20000100 	.word	0x20000100
 8003668:	20000118 	.word	0x20000118
 800366c:	200000e4 	.word	0x200000e4
 8003670:	200000e8 	.word	0x200000e8

08003674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800367a:	e019      	b.n	80036b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800367c:	f000 fb84 	bl	8003d88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <prvCheckTasksWaitingTermination+0x4c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4618      	mov	r0, r3
 800368e:	f7fe fde1 	bl	8002254 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <prvCheckTasksWaitingTermination+0x50>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3b01      	subs	r3, #1
 8003698:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <prvCheckTasksWaitingTermination+0x50>)
 800369a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <prvCheckTasksWaitingTermination+0x54>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <prvCheckTasksWaitingTermination+0x54>)
 80036a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036a6:	f000 fb9d 	bl	8003de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f80e 	bl	80036cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <prvCheckTasksWaitingTermination+0x54>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e1      	bne.n	800367c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000100 	.word	0x20000100
 80036c4:	2000012c 	.word	0x2000012c
 80036c8:	20000114 	.word	0x20000114

080036cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fd0d 	bl	80040f8 <vPortFree>
			vPortFree( pxTCB );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fd0a 	bl	80040f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <prvResetNextTaskUnblockTime+0x40>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <prvResetNextTaskUnblockTime+0x14>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <prvResetNextTaskUnblockTime+0x16>
 8003700:	2300      	movs	r3, #0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <prvResetNextTaskUnblockTime+0x44>)
 8003708:	f04f 32ff 	mov.w	r2, #4294967295
 800370c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800370e:	e008      	b.n	8003722 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <prvResetNextTaskUnblockTime+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <prvResetNextTaskUnblockTime+0x44>)
 8003720:	6013      	str	r3, [r2, #0]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	200000e4 	.word	0x200000e4
 8003730:	2000014c 	.word	0x2000014c

08003734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <xTaskGetSchedulerState+0x34>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003742:	2301      	movs	r3, #1
 8003744:	607b      	str	r3, [r7, #4]
 8003746:	e008      	b.n	800375a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <xTaskGetSchedulerState+0x38>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003750:	2302      	movs	r3, #2
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	e001      	b.n	800375a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800375a:	687b      	ldr	r3, [r7, #4]
	}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000138 	.word	0x20000138
 800376c:	20000154 	.word	0x20000154

08003770 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06e      	beq.n	8003864 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <xTaskPriorityInherit+0x100>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	429a      	cmp	r2, r3
 8003792:	d25e      	bcs.n	8003852 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db06      	blt.n	80037aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800379c:	4b34      	ldr	r3, [pc, #208]	; (8003870 <xTaskPriorityInherit+0x100>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f1c3 0207 	rsb	r2, r3, #7
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6959      	ldr	r1, [r3, #20]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <xTaskPriorityInherit+0x104>)
 80037bc:	4413      	add	r3, r2
 80037be:	4299      	cmp	r1, r3
 80037c0:	d101      	bne.n	80037c6 <xTaskPriorityInherit+0x56>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <xTaskPriorityInherit+0x58>
 80037c6:	2300      	movs	r3, #0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03a      	beq.n	8003842 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fd3f 	bl	8002254 <uxListRemove>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d115      	bne.n	8003808 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	4924      	ldr	r1, [pc, #144]	; (8003874 <xTaskPriorityInherit+0x104>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10a      	bne.n	8003808 <xTaskPriorityInherit+0x98>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	2201      	movs	r2, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43da      	mvns	r2, r3
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <xTaskPriorityInherit+0x108>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4013      	ands	r3, r2
 8003804:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <xTaskPriorityInherit+0x108>)
 8003806:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <xTaskPriorityInherit+0x100>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	2201      	movs	r2, #1
 8003818:	409a      	lsls	r2, r3
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <xTaskPriorityInherit+0x108>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	4a15      	ldr	r2, [pc, #84]	; (8003878 <xTaskPriorityInherit+0x108>)
 8003822:	6013      	str	r3, [r2, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <xTaskPriorityInherit+0x104>)
 8003832:	441a      	add	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	3304      	adds	r3, #4
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f7fe fcaf 	bl	800219e <vListInsertEnd>
 8003840:	e004      	b.n	800384c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <xTaskPriorityInherit+0x100>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e008      	b.n	8003864 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <xTaskPriorityInherit+0x100>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d201      	bcs.n	8003864 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003864:	68fb      	ldr	r3, [r7, #12]
	}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000002c 	.word	0x2000002c
 8003874:	20000030 	.word	0x20000030
 8003878:	20000134 	.word	0x20000134

0800387c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06c      	beq.n	800396c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <xTaskPriorityDisinherit+0xfc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d009      	beq.n	80038b0 <xTaskPriorityDisinherit+0x34>
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	e7fe      	b.n	80038ae <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <xTaskPriorityDisinherit+0x50>
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	e7fe      	b.n	80038ca <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	429a      	cmp	r2, r3
 80038e0:	d044      	beq.n	800396c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d140      	bne.n	800396c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fcb0 	bl	8002254 <uxListRemove>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	491f      	ldr	r1, [pc, #124]	; (800397c <xTaskPriorityDisinherit+0x100>)
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xTaskPriorityDisinherit+0xaa>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2201      	movs	r2, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	4b18      	ldr	r3, [pc, #96]	; (8003980 <xTaskPriorityDisinherit+0x104>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4013      	ands	r3, r2
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <xTaskPriorityDisinherit+0x104>)
 8003924:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	f1c3 0207 	rsb	r2, r3, #7
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	2201      	movs	r2, #1
 8003940:	409a      	lsls	r2, r3
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <xTaskPriorityDisinherit+0x104>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4313      	orrs	r3, r2
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <xTaskPriorityDisinherit+0x104>)
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <xTaskPriorityDisinherit+0x100>)
 800395a:	441a      	add	r2, r3
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	3304      	adds	r3, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f7fe fc1b 	bl	800219e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800396c:	697b      	ldr	r3, [r7, #20]
	}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	2000002c 	.word	0x2000002c
 800397c:	20000030 	.word	0x20000030
 8003980:	20000134 	.word	0x20000134

08003984 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003992:	2301      	movs	r3, #1
 8003994:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8086 	beq.w	8003aaa <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <vTaskPriorityDisinheritAfterTimeout+0x36>
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e7fe      	b.n	80039b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d902      	bls.n	80039ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	e002      	b.n	80039d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d067      	beq.n	8003aaa <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d162      	bne.n	8003aaa <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80039e4:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d109      	bne.n	8003a02 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	e7fe      	b.n	8003a00 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db04      	blt.n	8003a20 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f1c3 0207 	rsb	r2, r3, #7
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	6959      	ldr	r1, [r3, #20]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003a30:	4413      	add	r3, r2
 8003a32:	4299      	cmp	r1, r3
 8003a34:	d101      	bne.n	8003a3a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d034      	beq.n	8003aaa <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fc05 	bl	8002254 <uxListRemove>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d115      	bne.n	8003a7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4918      	ldr	r1, [pc, #96]	; (8003ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43da      	mvns	r2, r3
 8003a72:	4b12      	ldr	r3, [pc, #72]	; (8003abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4013      	ands	r3, r2
 8003a78:	4a10      	ldr	r2, [pc, #64]	; (8003abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003a7a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003a9c:	441a      	add	r2, r3
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7fe fb7a 	bl	800219e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003aaa:	bf00      	nop
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	2000002c 	.word	0x2000002c
 8003ab8:	20000030 	.word	0x20000030
 8003abc:	20000134 	.word	0x20000134

08003ac0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ad2:	3201      	adds	r2, #1
 8003ad4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003ad6:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
	}
 8003ada:	4618      	mov	r0, r3
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000002c 	.word	0x2000002c

08003ae8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af8:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fba8 	bl	8002254 <uxListRemove>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2201      	movs	r2, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	4b21      	ldr	r3, [pc, #132]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d10a      	bne.n	8003b40 <prvAddCurrentTaskToDelayedList+0x58>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	481a      	ldr	r0, [pc, #104]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b3a:	f7fe fb30 	bl	800219e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b3e:	e026      	b.n	8003b8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d209      	bcs.n	8003b6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe fb3d 	bl	80021e4 <vListInsert>
}
 8003b6a:	e010      	b.n	8003b8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fe fb33 	bl	80021e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d202      	bcs.n	8003b8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000130 	.word	0x20000130
 8003b9c:	2000002c 	.word	0x2000002c
 8003ba0:	20000134 	.word	0x20000134
 8003ba4:	20000118 	.word	0x20000118
 8003ba8:	200000e8 	.word	0x200000e8
 8003bac:	200000e4 	.word	0x200000e4
 8003bb0:	2000014c 	.word	0x2000014c

08003bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b04      	subs	r3, #4
 8003bc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b04      	subs	r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f023 0201 	bic.w	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3b04      	subs	r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003be4:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <pxPortInitialiseStack+0x54>)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	3b14      	subs	r3, #20
 8003bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3b20      	subs	r3, #32
 8003bfa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	08003c0d 	.word	0x08003c0d

08003c0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <prvTaskExitError+0x4c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d009      	beq.n	8003c34 <prvTaskExitError+0x28>
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e7fe      	b.n	8003c32 <prvTaskExitError+0x26>
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c46:	bf00      	nop
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0fc      	beq.n	8003c48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	20000008 	.word	0x20000008
 8003c5c:	00000000 	.word	0x00000000

08003c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <pxCurrentTCBConst2>)
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	6808      	ldr	r0, [r1, #0]
 8003c66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c6a:	f380 8809 	msr	PSP, r0
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8811 	msr	BASEPRI, r0
 8003c7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003c7e:	4770      	bx	lr

08003c80 <pxCurrentTCBConst2>:
 8003c80:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003c88:	4806      	ldr	r0, [pc, #24]	; (8003ca4 <prvPortStartFirstTask+0x1c>)
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	6800      	ldr	r0, [r0, #0]
 8003c8e:	f380 8808 	msr	MSP, r0
 8003c92:	b662      	cpsie	i
 8003c94:	b661      	cpsie	f
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	df00      	svc	0
 8003ca0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed08 	.word	0xe000ed08

08003ca8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <xPortStartScheduler+0xcc>)
 8003cb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b29      	ldr	r3, [pc, #164]	; (8003d78 <xPortStartScheduler+0xd0>)
 8003cd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cd6:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cdc:	e009      	b.n	8003cf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003cde:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a25      	ldr	r2, [pc, #148]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003ce6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d0ef      	beq.n	8003cde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1c3 0307 	rsb	r3, r3, #7
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d009      	beq.n	8003d1e <xPortStartScheduler+0x76>
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	e7fe      	b.n	8003d1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d1e:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d28:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d30:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <xPortStartScheduler+0xd4>)
 8003d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <xPortStartScheduler+0xd8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <xPortStartScheduler+0xd8>)
 8003d42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <xPortStartScheduler+0xd8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <xPortStartScheduler+0xd8>)
 8003d4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d54:	f000 f8b0 	bl	8003eb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d58:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <xPortStartScheduler+0xdc>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d5e:	f7ff ff93 	bl	8003c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d62:	f7ff facd 	bl	8003300 <vTaskSwitchContext>
	prvTaskExitError();
 8003d66:	f7ff ff51 	bl	8003c0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	e000e400 	.word	0xe000e400
 8003d78:	20000158 	.word	0x20000158
 8003d7c:	2000015c 	.word	0x2000015c
 8003d80:	e000ed20 	.word	0xe000ed20
 8003d84:	20000008 	.word	0x20000008

08003d88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <vPortEnterCritical+0x54>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <vPortEnterCritical+0x54>)
 8003da8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <vPortEnterCritical+0x54>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d10e      	bne.n	8003dd0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <vPortEnterCritical+0x58>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <vPortEnterCritical+0x48>
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	603b      	str	r3, [r7, #0]
 8003dce:	e7fe      	b.n	8003dce <vPortEnterCritical+0x46>
	}
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000008 	.word	0x20000008
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <vPortExitCritical+0x48>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d109      	bne.n	8003e06 <vPortExitCritical+0x22>
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	607b      	str	r3, [r7, #4]
 8003e04:	e7fe      	b.n	8003e04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <vPortExitCritical+0x48>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <vPortExitCritical+0x48>)
 8003e0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <vPortExitCritical+0x48>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <vPortExitCritical+0x3e>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	20000008 	.word	0x20000008

08003e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e30:	f3ef 8009 	mrs	r0, PSP
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <pxCurrentTCBConst>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e40:	6010      	str	r0, [r2, #0]
 8003e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e4a:	f380 8811 	msr	BASEPRI, r0
 8003e4e:	f7ff fa57 	bl	8003300 <vTaskSwitchContext>
 8003e52:	f04f 0000 	mov.w	r0, #0
 8003e56:	f380 8811 	msr	BASEPRI, r0
 8003e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	6808      	ldr	r0, [r1, #0]
 8003e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e66:	f380 8809 	msr	PSP, r0
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	4770      	bx	lr

08003e70 <pxCurrentTCBConst>:
 8003e70:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e90:	f7ff f97a 	bl	8003188 <xTaskIncrementTick>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <SysTick_Handler+0x3c>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <vPortSetupTimerInterrupt+0x30>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <vPortSetupTimerInterrupt+0x34>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <vPortSetupTimerInterrupt+0x38>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <vPortSetupTimerInterrupt+0x3c>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <vPortSetupTimerInterrupt+0x40>)
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003eda:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <vPortSetupTimerInterrupt+0x30>)
 8003edc:	2207      	movs	r2, #7
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	e000e010 	.word	0xe000e010
 8003eec:	e000e018 	.word	0xe000e018
 8003ef0:	2000000c 	.word	0x2000000c
 8003ef4:	10624dd3 	.word	0x10624dd3
 8003ef8:	e000e014 	.word	0xe000e014

08003efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f02:	f3ef 8305 	mrs	r3, IPSR
 8003f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	d913      	bls.n	8003f36 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f0e:	4a15      	ldr	r2, [pc, #84]	; (8003f64 <vPortValidateInterruptPriority+0x68>)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <vPortValidateInterruptPriority+0x6c>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	7afa      	ldrb	r2, [r7, #11]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d209      	bcs.n	8003f36 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e7fe      	b.n	8003f34 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <vPortValidateInterruptPriority+0x70>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <vPortValidateInterruptPriority+0x74>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d909      	bls.n	8003f5a <vPortValidateInterruptPriority+0x5e>
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	e7fe      	b.n	8003f58 <vPortValidateInterruptPriority+0x5c>
	}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	e000e3f0 	.word	0xe000e3f0
 8003f68:	20000158 	.word	0x20000158
 8003f6c:	e000ed0c 	.word	0xe000ed0c
 8003f70:	2000015c 	.word	0x2000015c

08003f74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f80:	f7ff f858 	bl	8003034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f84:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <pvPortMalloc+0x170>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f8c:	f000 f90c 	bl	80041a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f90:	4b55      	ldr	r3, [pc, #340]	; (80040e8 <pvPortMalloc+0x174>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f040 808c 	bne.w	80040b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01c      	beq.n	8003fde <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f023 0307 	bic.w	r3, r3, #7
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <pvPortMalloc+0x6a>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e7fe      	b.n	8003fdc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d068      	beq.n	80040b6 <pvPortMalloc+0x142>
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <pvPortMalloc+0x178>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d863      	bhi.n	80040b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fee:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <pvPortMalloc+0x17c>)
 8003ff0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <pvPortMalloc+0x17c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ff8:	e004      	b.n	8004004 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d903      	bls.n	8004016 <pvPortMalloc+0xa2>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f1      	bne.n	8003ffa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004016:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <pvPortMalloc+0x170>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	429a      	cmp	r2, r3
 800401e:	d04a      	beq.n	80040b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	4413      	add	r3, r2
 8004028:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	2308      	movs	r3, #8
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	429a      	cmp	r2, r3
 8004040:	d91e      	bls.n	8004080 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <pvPortMalloc+0xf4>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	e7fe      	b.n	8004066 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800407a:	69b8      	ldr	r0, [r7, #24]
 800407c:	f000 f8f6 	bl	800426c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004080:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <pvPortMalloc+0x178>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <pvPortMalloc+0x178>)
 800408c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <pvPortMalloc+0x178>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <pvPortMalloc+0x180>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d203      	bcs.n	80040a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800409a:	4b14      	ldr	r3, [pc, #80]	; (80040ec <pvPortMalloc+0x178>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <pvPortMalloc+0x180>)
 80040a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <pvPortMalloc+0x174>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040b6:	f7fe ffcb 	bl	8003050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <pvPortMalloc+0x164>
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e7fe      	b.n	80040d6 <pvPortMalloc+0x162>
	return pvReturn;
 80040d8:	69fb      	ldr	r3, [r7, #28]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3728      	adds	r7, #40	; 0x28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20001168 	.word	0x20001168
 80040e8:	20001174 	.word	0x20001174
 80040ec:	2000116c 	.word	0x2000116c
 80040f0:	20001160 	.word	0x20001160
 80040f4:	20001170 	.word	0x20001170

080040f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d046      	beq.n	8004198 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800410a:	2308      	movs	r3, #8
 800410c:	425b      	negs	r3, r3
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <vPortFree+0xa8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <vPortFree+0x42>
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e7fe      	b.n	8004138 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <vPortFree+0x5e>
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	e7fe      	b.n	8004154 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <vPortFree+0xa8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d019      	beq.n	8004198 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <vPortFree+0xa8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	43db      	mvns	r3, r3
 8004176:	401a      	ands	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800417c:	f7fe ff5a 	bl	8003034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <vPortFree+0xac>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4413      	add	r3, r2
 800418a:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <vPortFree+0xac>)
 800418c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f000 f86c 	bl	800426c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004194:	f7fe ff5c 	bl	8003050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20001174 	.word	0x20001174
 80041a4:	2000116c 	.word	0x2000116c

080041a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041b4:	4b27      	ldr	r3, [pc, #156]	; (8004254 <prvHeapInit+0xac>)
 80041b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3307      	adds	r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <prvHeapInit+0xac>)
 80041d8:	4413      	add	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041e0:	4a1d      	ldr	r2, [pc, #116]	; (8004258 <prvHeapInit+0xb0>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <prvHeapInit+0xb0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041f4:	2208      	movs	r2, #8
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0307 	bic.w	r3, r3, #7
 8004202:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a15      	ldr	r2, [pc, #84]	; (800425c <prvHeapInit+0xb4>)
 8004208:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <prvHeapInit+0xb4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <prvHeapInit+0xb4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <prvHeapInit+0xb4>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <prvHeapInit+0xb8>)
 8004236:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a09      	ldr	r2, [pc, #36]	; (8004264 <prvHeapInit+0xbc>)
 800423e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvHeapInit+0xc0>)
 8004242:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004246:	601a      	str	r2, [r3, #0]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000160 	.word	0x20000160
 8004258:	20001160 	.word	0x20001160
 800425c:	20001168 	.word	0x20001168
 8004260:	20001170 	.word	0x20001170
 8004264:	2000116c 	.word	0x2000116c
 8004268:	20001174 	.word	0x20001174

0800426c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <prvInsertBlockIntoFreeList+0xa8>)
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e002      	b.n	8004280 <prvInsertBlockIntoFreeList+0x14>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d8f7      	bhi.n	800427a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	4413      	add	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d108      	bne.n	80042ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	441a      	add	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	441a      	add	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d118      	bne.n	80042f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <prvInsertBlockIntoFreeList+0xac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d00d      	beq.n	80042ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e008      	b.n	80042fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <prvInsertBlockIntoFreeList+0xac>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e003      	b.n	80042fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d002      	beq.n	800430a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	20001160 	.word	0x20001160
 8004318:	20001168 	.word	0x20001168

0800431c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800431c:	b5b0      	push	{r4, r5, r7, lr}
 800431e:	b098      	sub	sp, #96	; 0x60
 8004320:	af00      	add	r7, sp, #0

  /* Create the semaphores(s) */
  /* definition and creation of bSem01 */

  /* definition and creation of bSemEmpty */
	osSemaphoreDef(bSem01);
 8004322:	2300      	movs	r3, #0
 8004324:	65fb      	str	r3, [r7, #92]	; 0x5c
	  bSem01Handle = osSemaphoreCreate(osSemaphore(bSem01), 1);
 8004326:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f7fd fe63 	bl	8001ff8 <osSemaphoreCreate>
 8004332:	4602      	mov	r2, r0
 8004334:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <MX_FREERTOS_Init+0xd4>)
 8004336:	601a      	str	r2, [r3, #0]

  osSemaphoreDef(bSemEmpty);
 8004338:	2300      	movs	r3, #0
 800433a:	65bb      	str	r3, [r7, #88]	; 0x58
  bSemEmptyHandle = osSemaphoreCreate(osSemaphore(bSemEmpty), 4);
 800433c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004340:	2104      	movs	r1, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd fe58 	bl	8001ff8 <osSemaphoreCreate>
 8004348:	4602      	mov	r2, r0
 800434a:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <MX_FREERTOS_Init+0xd8>)
 800434c:	601a      	str	r2, [r3, #0]

  /* definition and creation of bSemFilled */
  osSemaphoreDef(bSemFilled);
 800434e:	2300      	movs	r3, #0
 8004350:	657b      	str	r3, [r7, #84]	; 0x54
  bSemFilledHandle = osSemaphoreCreate(osSemaphore(bSemFilled), 4);
 8004352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004356:	2104      	movs	r1, #4
 8004358:	4618      	mov	r0, r3
 800435a:	f7fd fe4d 	bl	8001ff8 <osSemaphoreCreate>
 800435e:	4602      	mov	r2, r0
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <MX_FREERTOS_Init+0xdc>)
 8004362:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Periodic */
  osThreadDef(Periodic, PeriodicTask, osPriorityNormal, 0, 128);
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <MX_FREERTOS_Init+0xe0>)
 8004366:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800436a:	461d      	mov	r5, r3
 800436c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800436e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	6023      	str	r3, [r4, #0]
  PeriodicHandle = osThreadCreate(osThread(Periodic), NULL);
 8004374:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fe01 	bl	8001f82 <osThreadCreate>
 8004380:	4602      	mov	r2, r0
 8004382:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <MX_FREERTOS_Init+0xe4>)
 8004384:	601a      	str	r2, [r3, #0]

  /* definition and creation of Handle */
  osThreadDef(Handle, HandleTask, osPriorityNormal, 0, 128);
 8004386:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <MX_FREERTOS_Init+0xe8>)
 8004388:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800438c:	461d      	mov	r5, r3
 800438e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	6023      	str	r3, [r4, #0]
  HandleHandle = osThreadCreate(osThread(Handle), NULL);
 8004396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f7fd fdf0 	bl	8001f82 <osThreadCreate>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <MX_FREERTOS_Init+0xec>)
 80043a6:	601a      	str	r2, [r3, #0]

  /* definition and creation of Producer */
  osThreadDef(Producer, FuncProducer, osPriorityNormal, 0, 128);
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <MX_FREERTOS_Init+0xf0>)
 80043aa:	f107 0418 	add.w	r4, r7, #24
 80043ae:	461d      	mov	r5, r3
 80043b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	6023      	str	r3, [r4, #0]
  ProducerHandle = osThreadCreate(osThread(Producer), NULL);
 80043b8:	f107 0318 	add.w	r3, r7, #24
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd fddf 	bl	8001f82 <osThreadCreate>
 80043c4:	4602      	mov	r2, r0
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <MX_FREERTOS_Init+0xf4>)
 80043c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Consumer */
  osThreadDef(Consumer, FuncConsumer, osPriorityBelowNormal, 0, 128);
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <MX_FREERTOS_Init+0xf8>)
 80043cc:	1d3c      	adds	r4, r7, #4
 80043ce:	461d      	mov	r5, r3
 80043d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	6023      	str	r3, [r4, #0]
  ConsumerHandle = osThreadCreate(osThread(Consumer), NULL);
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd fdd0 	bl	8001f82 <osThreadCreate>
 80043e2:	4602      	mov	r2, r0
 80043e4:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <MX_FREERTOS_Init+0xfc>)
 80043e6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80043e8:	bf00      	nop
 80043ea:	3760      	adds	r7, #96	; 0x60
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bdb0      	pop	{r4, r5, r7, pc}
 80043f0:	2000118c 	.word	0x2000118c
 80043f4:	20001184 	.word	0x20001184
 80043f8:	20001198 	.word	0x20001198
 80043fc:	08004ab4 	.word	0x08004ab4
 8004400:	20001180 	.word	0x20001180
 8004404:	08004ad0 	.word	0x08004ad0
 8004408:	20001188 	.word	0x20001188
 800440c:	08004af0 	.word	0x08004af0
 8004410:	2000117c 	.word	0x2000117c
 8004414:	08004b10 	.word	0x08004b10
 8004418:	20001194 	.word	0x20001194

0800441c <PeriodicTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_PeriodicTask */
void PeriodicTask(void const * argument)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN PeriodicTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 8004424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004428:	f7fd fdd2 	bl	8001fd0 <osDelay>
	   osSemaphoreRelease(bSem01Handle);
 800442c:	4b02      	ldr	r3, [pc, #8]	; (8004438 <PeriodicTask+0x1c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7fd fe53 	bl	80020dc <osSemaphoreRelease>
	  osDelay(1000);
 8004436:	e7f5      	b.n	8004424 <PeriodicTask+0x8>
 8004438:	2000118c 	.word	0x2000118c

0800443c <HandleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandleTask */
void HandleTask(void const * argument)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandleTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(bSem01Handle, osWaitForever);
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HandleTask+0x2c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd fdf7 	bl	8002040 <osSemaphoreWait>
	   HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8004452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004456:	4805      	ldr	r0, [pc, #20]	; (800446c <HandleTask+0x30>)
 8004458:	f7fc fab0 	bl	80009bc <HAL_GPIO_TogglePin>
	   HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800445c:	2104      	movs	r1, #4
 800445e:	4804      	ldr	r0, [pc, #16]	; (8004470 <HandleTask+0x34>)
 8004460:	f7fc faac 	bl	80009bc <HAL_GPIO_TogglePin>
	  osSemaphoreWait(bSem01Handle, osWaitForever);
 8004464:	e7ee      	b.n	8004444 <HandleTask+0x8>
 8004466:	bf00      	nop
 8004468:	2000118c 	.word	0x2000118c
 800446c:	40010800 	.word	0x40010800
 8004470:	40011400 	.word	0x40011400

08004474 <FuncProducer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FuncProducer */
void FuncProducer(void const * argument)
{
 8004474:	b5b0      	push	{r4, r5, r7, lr}
 8004476:	b090      	sub	sp, #64	; 0x40
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncProducer */
  /* Infinite loop */
  for(;;)
  {char msg[50];
  osSemaphoreWait(bSemEmptyHandle, osWaitForever);
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <FuncProducer+0x64>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 31ff 	mov.w	r1, #4294967295
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fddb 	bl	8002040 <osSemaphoreWait>
  sprintf(msg, "Producer produce data\r\n");
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4a13      	ldr	r2, [pc, #76]	; (80044dc <FuncProducer+0x68>)
 8004490:	461c      	mov	r4, r3
 8004492:	4615      	mov	r5, r2
 8004494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004498:	e895 0003 	ldmia.w	r5, {r0, r1}
 800449c:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fb fec3 	bl	8000230 <strlen>
 80044aa:	4603      	mov	r3, r0
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f107 010c 	add.w	r1, r7, #12
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	480a      	ldr	r0, [pc, #40]	; (80044e0 <FuncProducer+0x6c>)
 80044b8:	f7fd f941 	bl	800173e <HAL_UART_Transmit>
  HAL_Delay(500);
 80044bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044c0:	f7fb fef0 	bl	80002a4 <HAL_Delay>
  osSemaphoreRelease(bSemFilledHandle);
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <FuncProducer+0x70>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fd fe07 	bl	80020dc <osSemaphoreRelease>
//  osSemaphoreRelease(bSemFilledHandle);
  osDelay(600);
 80044ce:	f44f 7016 	mov.w	r0, #600	; 0x258
 80044d2:	f7fd fd7d 	bl	8001fd0 <osDelay>
  {char msg[50];
 80044d6:	e7d1      	b.n	800447c <FuncProducer+0x8>
 80044d8:	20001184 	.word	0x20001184
 80044dc:	08004b24 	.word	0x08004b24
 80044e0:	200011dc 	.word	0x200011dc
 80044e4:	20001198 	.word	0x20001198

080044e8 <FuncConsumer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FuncConsumer */
void FuncConsumer(void const * argument)
{
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b090      	sub	sp, #64	; 0x40
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FuncConsumer */
  /* Infinite loop */
  for(;;)
  {char msg[50];
  osSemaphoreWait(bSemFilledHandle, osWaitForever);
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <FuncConsumer+0x64>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd fda1 	bl	8002040 <osSemaphoreWait>
  sprintf(msg, "Consumer consume data\r\n");
 80044fe:	f107 030c 	add.w	r3, r7, #12
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <FuncConsumer+0x68>)
 8004504:	461c      	mov	r4, r3
 8004506:	4615      	mov	r5, r2
 8004508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800450a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800450c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004510:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	4618      	mov	r0, r3
 800451a:	f7fb fe89 	bl	8000230 <strlen>
 800451e:	4603      	mov	r3, r0
 8004520:	b29a      	uxth	r2, r3
 8004522:	f107 010c 	add.w	r1, r7, #12
 8004526:	f04f 33ff 	mov.w	r3, #4294967295
 800452a:	480a      	ldr	r0, [pc, #40]	; (8004554 <FuncConsumer+0x6c>)
 800452c:	f7fd f907 	bl	800173e <HAL_UART_Transmit>
  HAL_Delay(500);
 8004530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004534:	f7fb feb6 	bl	80002a4 <HAL_Delay>
  osSemaphoreRelease(bSemEmptyHandle);
 8004538:	4b07      	ldr	r3, [pc, #28]	; (8004558 <FuncConsumer+0x70>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd fdcd 	bl	80020dc <osSemaphoreRelease>
  osDelay(1300);
 8004542:	f240 5014 	movw	r0, #1300	; 0x514
 8004546:	f7fd fd43 	bl	8001fd0 <osDelay>
  {char msg[50];
 800454a:	e7d1      	b.n	80044f0 <FuncConsumer+0x8>
 800454c:	20001198 	.word	0x20001198
 8004550:	08004b3c 	.word	0x08004b3c
 8004554:	200011dc 	.word	0x200011dc
 8004558:	20001184 	.word	0x20001184

0800455c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004562:	f107 0308 	add.w	r3, r7, #8
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	609a      	str	r2, [r3, #8]
 800456e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <MX_GPIO_Init+0x9c>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <MX_GPIO_Init+0x9c>)
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6193      	str	r3, [r2, #24]
 800457c:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <MX_GPIO_Init+0x9c>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004588:	4b1b      	ldr	r3, [pc, #108]	; (80045f8 <MX_GPIO_Init+0x9c>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4a1a      	ldr	r2, [pc, #104]	; (80045f8 <MX_GPIO_Init+0x9c>)
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	6193      	str	r3, [r2, #24]
 8004594:	4b18      	ldr	r3, [pc, #96]	; (80045f8 <MX_GPIO_Init+0x9c>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045a6:	4815      	ldr	r0, [pc, #84]	; (80045fc <MX_GPIO_Init+0xa0>)
 80045a8:	f7fc f9f0 	bl	800098c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2104      	movs	r1, #4
 80045b0:	4813      	ldr	r0, [pc, #76]	; (8004600 <MX_GPIO_Init+0xa4>)
 80045b2:	f7fc f9eb 	bl	800098c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80045b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045bc:	2301      	movs	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2302      	movs	r3, #2
 80045c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	4619      	mov	r1, r3
 80045ce:	480b      	ldr	r0, [pc, #44]	; (80045fc <MX_GPIO_Init+0xa0>)
 80045d0:	f7fc f872 	bl	80006b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80045d4:	2304      	movs	r3, #4
 80045d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d8:	2301      	movs	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045e0:	2302      	movs	r3, #2
 80045e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	4619      	mov	r1, r3
 80045ea:	4805      	ldr	r0, [pc, #20]	; (8004600 <MX_GPIO_Init+0xa4>)
 80045ec:	f7fc f864 	bl	80006b8 <HAL_GPIO_Init>

}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010800 	.word	0x40010800
 8004600:	40011400 	.word	0x40011400

08004604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004608:	f7fb fe1a 	bl	8000240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800460c:	f000 f809 	bl	8004622 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004610:	f7ff ffa4 	bl	800455c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004614:	f000 f952 	bl	80048bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8004618:	f7ff fe80 	bl	800431c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800461c:	f7fd fcaa 	bl	8001f74 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004620:	e7fe      	b.n	8004620 <main+0x1c>

08004622 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b090      	sub	sp, #64	; 0x40
 8004626:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004628:	f107 0318 	add.w	r3, r7, #24
 800462c:	2228      	movs	r2, #40	; 0x28
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fa16 	bl	8004a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004644:	2301      	movs	r3, #1
 8004646:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800464c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800464e:	2300      	movs	r3, #0
 8004650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004652:	2301      	movs	r3, #1
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004656:	2302      	movs	r3, #2
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800465a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004660:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004664:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004666:	f107 0318 	add.w	r3, r7, #24
 800466a:	4618      	mov	r0, r3
 800466c:	f7fc f9be 	bl	80009ec <HAL_RCC_OscConfig>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004676:	f000 f82b 	bl	80046d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800467a:	230f      	movs	r3, #15
 800467c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800467e:	2302      	movs	r3, #2
 8004680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800468a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fc29 	bl	8000eec <HAL_RCC_ClockConfig>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80046a0:	f000 f816 	bl	80046d0 <Error_Handler>
  }
}
 80046a4:	bf00      	nop
 80046a6:	3740      	adds	r7, #64	; 0x40
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80046be:	f7fb fdd5 	bl	800026c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40000400 	.word	0x40000400

080046d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046e2:	4b18      	ldr	r3, [pc, #96]	; (8004744 <HAL_MspInit+0x68>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_MspInit+0x68>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	6193      	str	r3, [r2, #24]
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_MspInit+0x68>)
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_MspInit+0x68>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4a11      	ldr	r2, [pc, #68]	; (8004744 <HAL_MspInit+0x68>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004704:	61d3      	str	r3, [r2, #28]
 8004706:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <HAL_MspInit+0x68>)
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004712:	2200      	movs	r2, #0
 8004714:	210f      	movs	r1, #15
 8004716:	f06f 0001 	mvn.w	r0, #1
 800471a:	f7fb fe9a 	bl	8000452 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_MspInit+0x6c>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	4a04      	ldr	r2, [pc, #16]	; (8004748 <HAL_MspInit+0x6c>)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	40010000 	.word	0x40010000

0800474c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08c      	sub	sp, #48	; 0x30
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 800475c:	2200      	movs	r2, #0
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	201d      	movs	r0, #29
 8004762:	f7fb fe76 	bl	8000452 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8004766:	201d      	movs	r0, #29
 8004768:	f7fb fe8f 	bl	800048a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800476c:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_InitTick+0xa0>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <HAL_InitTick+0xa0>)
 8004772:	f043 0302 	orr.w	r3, r3, #2
 8004776:	61d3      	str	r3, [r2, #28]
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_InitTick+0xa0>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004784:	f107 0210 	add.w	r2, r7, #16
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7fc fd2a 	bl	80011e8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004794:	f7fc fd00 	bl	8001198 <HAL_RCC_GetPCLK1Freq>
 8004798:	4603      	mov	r3, r0
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <HAL_InitTick+0xa4>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0c9b      	lsrs	r3, r3, #18
 80047a8:	3b01      	subs	r3, #1
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <HAL_InitTick+0xa8>)
 80047ae:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <HAL_InitTick+0xac>)
 80047b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <HAL_InitTick+0xa8>)
 80047b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047b8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_InitTick+0xa8>)
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <HAL_InitTick+0xa8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_InitTick+0xa8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80047cc:	4809      	ldr	r0, [pc, #36]	; (80047f4 <HAL_InitTick+0xa8>)
 80047ce:	f7fc fd59 	bl	8001284 <HAL_TIM_Base_Init>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80047d8:	4806      	ldr	r0, [pc, #24]	; (80047f4 <HAL_InitTick+0xa8>)
 80047da:	f7fc fd87 	bl	80012ec <HAL_TIM_Base_Start_IT>
 80047de:	4603      	mov	r3, r0
 80047e0:	e000      	b.n	80047e4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	; 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40021000 	.word	0x40021000
 80047f0:	431bde83 	.word	0x431bde83
 80047f4:	2000119c 	.word	0x2000119c
 80047f8:	40000400 	.word	0x40000400

080047fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800480c:	e7fe      	b.n	800480c <HardFault_Handler+0x4>

0800480e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004812:	e7fe      	b.n	8004812 <MemManage_Handler+0x4>

08004814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004818:	e7fe      	b.n	8004818 <BusFault_Handler+0x4>

0800481a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800481a:	b480      	push	{r7}
 800481c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800481e:	e7fe      	b.n	800481e <UsageFault_Handler+0x4>

08004820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <TIM3_IRQHandler+0x10>)
 8004832:	f7fc fd7e 	bl	8001332 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	2000119c 	.word	0x2000119c

08004840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <USART1_IRQHandler+0x10>)
 8004846:	f7fd f813 	bl	8001870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	200011dc 	.word	0x200011dc

08004854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <SystemInit+0x5c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <SystemInit+0x5c>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <SystemInit+0x5c>)
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4911      	ldr	r1, [pc, #68]	; (80048b0 <SystemInit+0x5c>)
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <SystemInit+0x60>)
 800486c:	4013      	ands	r3, r2
 800486e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <SystemInit+0x5c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <SystemInit+0x5c>)
 8004876:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <SystemInit+0x5c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <SystemInit+0x5c>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <SystemInit+0x5c>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <SystemInit+0x5c>)
 8004892:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004896:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <SystemInit+0x5c>)
 800489a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800489e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <SystemInit+0x64>)
 80048a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40021000 	.word	0x40021000
 80048b4:	f8ff0000 	.word	0xf8ff0000
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <MX_USART1_UART_Init+0x50>)
 80048c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048dc:	2200      	movs	r2, #0
 80048de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048e2:	220c      	movs	r2, #12
 80048e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048f2:	4805      	ldr	r0, [pc, #20]	; (8004908 <MX_USART1_UART_Init+0x4c>)
 80048f4:	f7fc fed6 	bl	80016a4 <HAL_UART_Init>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80048fe:	f7ff fee7 	bl	80046d0 <Error_Handler>
  }

}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200011dc 	.word	0x200011dc
 800490c:	40013800 	.word	0x40013800

08004910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_UART_MspInit+0x9c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d139      	bne.n	80049a4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004930:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <HAL_UART_MspInit+0xa0>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_UART_MspInit+0xa0>)
 8004936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800493a:	6193      	str	r3, [r2, #24]
 800493c:	4b1c      	ldr	r3, [pc, #112]	; (80049b0 <HAL_UART_MspInit+0xa0>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_UART_MspInit+0xa0>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <HAL_UART_MspInit+0xa0>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	6193      	str	r3, [r2, #24]
 8004954:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <HAL_UART_MspInit+0xa0>)
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800496a:	2303      	movs	r3, #3
 800496c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800496e:	f107 0310 	add.w	r3, r7, #16
 8004972:	4619      	mov	r1, r3
 8004974:	480f      	ldr	r0, [pc, #60]	; (80049b4 <HAL_UART_MspInit+0xa4>)
 8004976:	f7fb fe9f 	bl	80006b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800497a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004984:	2300      	movs	r3, #0
 8004986:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004988:	f107 0310 	add.w	r3, r7, #16
 800498c:	4619      	mov	r1, r3
 800498e:	4809      	ldr	r0, [pc, #36]	; (80049b4 <HAL_UART_MspInit+0xa4>)
 8004990:	f7fb fe92 	bl	80006b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004994:	2200      	movs	r2, #0
 8004996:	2105      	movs	r1, #5
 8004998:	2025      	movs	r0, #37	; 0x25
 800499a:	f7fb fd5a 	bl	8000452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800499e:	2025      	movs	r0, #37	; 0x25
 80049a0:	f7fb fd73 	bl	800048a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80049a4:	bf00      	nop
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40013800 	.word	0x40013800
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40010800 	.word	0x40010800

080049b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80049b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80049ba:	e003      	b.n	80049c4 <LoopCopyDataInit>

080049bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80049be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80049c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80049c2:	3104      	adds	r1, #4

080049c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80049c4:	480a      	ldr	r0, [pc, #40]	; (80049f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80049c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80049ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80049cc:	d3f6      	bcc.n	80049bc <CopyDataInit>
  ldr r2, =_sbss
 80049ce:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80049d0:	e002      	b.n	80049d8 <LoopFillZerobss>

080049d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80049d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80049d4:	f842 3b04 	str.w	r3, [r2], #4

080049d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80049da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80049dc:	d3f9      	bcc.n	80049d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80049de:	f7ff ff39 	bl	8004854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049e2:	f000 f80f 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049e6:	f7ff fe0d 	bl	8004604 <main>
  bx lr
 80049ea:	4770      	bx	lr
  ldr r3, =_sidata
 80049ec:	08004b74 	.word	0x08004b74
  ldr r0, =_sdata
 80049f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80049f4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80049f8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80049fc:	2000121c 	.word	0x2000121c

08004a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a00:	e7fe      	b.n	8004a00 <ADC1_2_IRQHandler>
	...

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	2500      	movs	r5, #0
 8004a08:	4e0c      	ldr	r6, [pc, #48]	; (8004a3c <__libc_init_array+0x38>)
 8004a0a:	4c0d      	ldr	r4, [pc, #52]	; (8004a40 <__libc_init_array+0x3c>)
 8004a0c:	1ba4      	subs	r4, r4, r6
 8004a0e:	10a4      	asrs	r4, r4, #2
 8004a10:	42a5      	cmp	r5, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	f000 f82e 	bl	8004a74 <_init>
 8004a18:	2500      	movs	r5, #0
 8004a1a:	4e0a      	ldr	r6, [pc, #40]	; (8004a44 <__libc_init_array+0x40>)
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	; (8004a48 <__libc_init_array+0x44>)
 8004a1e:	1ba4      	subs	r4, r4, r6
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	42a5      	cmp	r5, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a2c:	4798      	blx	r3
 8004a2e:	3501      	adds	r5, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a36:	4798      	blx	r3
 8004a38:	3501      	adds	r5, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	08004b6c 	.word	0x08004b6c
 8004a40:	08004b6c 	.word	0x08004b6c
 8004a44:	08004b6c 	.word	0x08004b6c
 8004a48:	08004b70 	.word	0x08004b70

08004a4c <memcpy>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	1e43      	subs	r3, r0, #1
 8004a50:	440a      	add	r2, r1
 8004a52:	4291      	cmp	r1, r2
 8004a54:	d100      	bne.n	8004a58 <memcpy+0xc>
 8004a56:	bd10      	pop	{r4, pc}
 8004a58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a60:	e7f7      	b.n	8004a52 <memcpy+0x6>

08004a62 <memset>:
 8004a62:	4603      	mov	r3, r0
 8004a64:	4402      	add	r2, r0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d100      	bne.n	8004a6c <memset+0xa>
 8004a6a:	4770      	bx	lr
 8004a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a70:	e7f9      	b.n	8004a66 <memset+0x4>
	...

08004a74 <_init>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr

08004a80 <_fini>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr
