/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 25 06:22:28 GMT 2020
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.function.Consumer;
import net.mooctest.ArrayMultiTreeNode;
import net.mooctest.LinkedMultiTreeNode;
import net.mooctest.MultiTreeNode;
import net.mooctest.TraversalAction;
import net.mooctest.TreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArrayMultiTreeNode_ESTest extends ArrayMultiTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(2832);
      LinkedMultiTreeNode<Integer> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>(linkedMultiTreeNode0, 1804);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Object>("yIu!#[md4A");
      arrayMultiTreeNode0.parent = (TreeNode<Object>) arrayMultiTreeNode1;
      // Undeclared exception!
      try { 
        arrayMultiTreeNode0.siblings();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg", 2672);
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg");
      arrayMultiTreeNode1.add(arrayMultiTreeNode0);
      arrayMultiTreeNode0.siblings();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>((Object) null);
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode1, 1985);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode2);
      arrayMultiTreeNode0.add(linkedMultiTreeNode0);
      boolean boolean0 = arrayMultiTreeNode0.hasSubtree(linkedMultiTreeNode0);
      assertFalse(linkedMultiTreeNode0.isRoot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("The specified tree node %1$s was not found in the current tree node %2$s", 1);
      boolean boolean0 = arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode0.isRoot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 146);
      // Undeclared exception!
      try { 
        arrayMultiTreeNode0.traversePreOrder((TraversalAction<TreeNode<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ArrayMultiTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1135);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>(integer0, 1);
      // Undeclared exception!
      try { 
        arrayMultiTreeNode0.traversePostOrder((TraversalAction<TreeNode<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ArrayMultiTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 0);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Object>(arrayMultiTreeNode0);
      ArrayMultiTreeNode<TreeNode<Object>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<TreeNode<Object>>(arrayMultiTreeNode1, 0);
      LinkedList<ArrayMultiTreeNode<Integer>> linkedList0 = new LinkedList<ArrayMultiTreeNode<Integer>>();
      linkedList0.add(arrayMultiTreeNode0);
      arrayMultiTreeNode0.addSubtrees(linkedList0);
      // Undeclared exception!
      arrayMultiTreeNode2.siblings();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg", 2672);
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg");
      arrayMultiTreeNode1.add(arrayMultiTreeNode1);
      boolean boolean0 = arrayMultiTreeNode1.contains(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode1.isRoot());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>((Object) null);
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode1, 1985);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode2);
      arrayMultiTreeNode0.add(linkedMultiTreeNode0);
      assertEquals(1, linkedMultiTreeNode0.level());
      
      boolean boolean0 = arrayMultiTreeNode0.isLeaf();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode0, 1985);
      boolean boolean0 = arrayMultiTreeNode1.isLeaf();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode0, 1985);
      arrayMultiTreeNode1.add(arrayMultiTreeNode1);
      assertFalse(arrayMultiTreeNode1.isRoot());
      
      boolean boolean0 = arrayMultiTreeNode1.dropSubtree(arrayMultiTreeNode1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 0);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Object>(arrayMultiTreeNode0);
      ArrayMultiTreeNode<TreeNode<Object>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<TreeNode<Object>>(arrayMultiTreeNode1, 0);
      arrayMultiTreeNode2.iterator();
      assertTrue(arrayMultiTreeNode2.isLeaf());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 0);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Object>(arrayMultiTreeNode0);
      ArrayMultiTreeNode<TreeNode<Object>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<TreeNode<Object>>(arrayMultiTreeNode1, 0);
      // Undeclared exception!
      try { 
        arrayMultiTreeNode2.siblings();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to find the siblings. The tree node 
         // +- 
         // +- 
         // +- 0
         // 
         // 
         //  is root
         //
         verifyException("net.mooctest.ArrayMultiTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(2672);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 2672);
      LinkedList<MultiTreeNode<Integer>> linkedList0 = new LinkedList<MultiTreeNode<Integer>>();
      boolean boolean0 = arrayMultiTreeNode0.addSubtrees(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("\n+- 1985\n");
      int int0 = arrayMultiTreeNode0.height();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>((Object) null);
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode1, 1985);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode2);
      arrayMultiTreeNode0.add(linkedMultiTreeNode0);
      assertFalse(linkedMultiTreeNode0.isRoot());
      
      int int0 = arrayMultiTreeNode0.height();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("rcGJ%;~s#,=Hdi", 0);
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("O");
      arrayMultiTreeNode0.add(arrayMultiTreeNode1);
      assertEquals(1, arrayMultiTreeNode1.level());
      
      arrayMultiTreeNode0.postOrdered();
      assertFalse(arrayMultiTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(2656);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 2656);
      LinkedList<MultiTreeNode<Integer>> linkedList0 = new LinkedList<MultiTreeNode<Integer>>();
      linkedList0.add((MultiTreeNode<Integer>) arrayMultiTreeNode0);
      arrayMultiTreeNode0.addSubtrees(linkedList0);
      arrayMultiTreeNode0.find(integer0);
      assertFalse(arrayMultiTreeNode0.isRoot());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg", 2672);
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg");
      arrayMultiTreeNode1.add(arrayMultiTreeNode1);
      boolean boolean0 = arrayMultiTreeNode1.remove(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode1.isRoot());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode0, 1985);
      boolean boolean0 = arrayMultiTreeNode1.remove(arrayMultiTreeNode1);
      assertTrue(arrayMultiTreeNode1.isLeaf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-2003));
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode0);
      boolean boolean0 = arrayMultiTreeNode1.remove((TreeNode<MultiTreeNode<Integer>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg");
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("PD1ssrk");
      arrayMultiTreeNode0.add(arrayMultiTreeNode1);
      TreeNode.unlinkParent((TreeNode<String>) arrayMultiTreeNode1);
      // Undeclared exception!
      try { 
        arrayMultiTreeNode0.commonAncestor(arrayMultiTreeNode1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to find the common ancestor between tree nodes. The specified tree node 
         // +- PD1ssrk
         //  was not found in the current tree node 
         // +- $Qk|iiMK1cKJg
         // +- PD1ssrk
         //
         verifyException("net.mooctest.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>((Object) null);
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode1, 1985);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode2);
      arrayMultiTreeNode0.add(linkedMultiTreeNode0);
      boolean boolean0 = arrayMultiTreeNode0.contains(linkedMultiTreeNode0);
      assertFalse(linkedMultiTreeNode0.isRoot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>((Object) null);
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode1, 1985);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode2);
      boolean boolean0 = arrayMultiTreeNode0.contains(linkedMultiTreeNode0);
      assertTrue(arrayMultiTreeNode2.isLeaf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 1);
      LinkedMultiTreeNode<ArrayMultiTreeNode<Integer>> linkedMultiTreeNode0 = new LinkedMultiTreeNode<ArrayMultiTreeNode<Integer>>(arrayMultiTreeNode0);
      ArrayMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>(linkedMultiTreeNode0);
      ArrayMultiTreeNode<ArrayMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<ArrayMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>>(arrayMultiTreeNode1);
      boolean boolean0 = arrayMultiTreeNode2.contains((TreeNode<ArrayMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(2656);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      LinkedList<MultiTreeNode<Integer>> linkedList0 = new LinkedList<MultiTreeNode<Integer>>();
      LinkedMultiTreeNode<Integer> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Integer>(integer0);
      linkedList0.add((MultiTreeNode<Integer>) linkedMultiTreeNode0);
      linkedList0.add((MultiTreeNode<Integer>) arrayMultiTreeNode0);
      arrayMultiTreeNode0.addSubtrees(linkedList0);
      boolean boolean0 = arrayMultiTreeNode0.hasSubtree(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode0.isRoot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg", 2672);
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("$Qk|iiMK1cKJg");
      arrayMultiTreeNode1.add(arrayMultiTreeNode1);
      boolean boolean0 = arrayMultiTreeNode1.hasSubtree(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode1.isRoot());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedMultiTreeNode<Integer> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode0 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(linkedMultiTreeNode0, 0);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0, 0);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode2 = new ArrayMultiTreeNode<Object>(arrayMultiTreeNode1);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode1 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode0);
      boolean boolean0 = arrayMultiTreeNode2.hasSubtree(linkedMultiTreeNode1);
      assertTrue(arrayMultiTreeNode2.isLeaf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMultiTreeNode<Integer> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Integer>((Integer) null);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>(linkedMultiTreeNode0, 2);
      boolean boolean0 = arrayMultiTreeNode0.hasSubtree((TreeNode<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(2656);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      LinkedList<MultiTreeNode<Integer>> linkedList0 = new LinkedList<MultiTreeNode<Integer>>();
      LinkedMultiTreeNode<Integer> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Integer>(integer0);
      linkedList0.add((MultiTreeNode<Integer>) linkedMultiTreeNode0);
      arrayMultiTreeNode0.addSubtrees(linkedList0);
      assertFalse(arrayMultiTreeNode0.isLeaf());
      
      arrayMultiTreeNode0.clear();
      assertTrue(arrayMultiTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 0);
      ArrayMultiTreeNode<Object> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Object>(arrayMultiTreeNode0);
      ArrayMultiTreeNode<TreeNode<Object>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<TreeNode<Object>>(arrayMultiTreeNode1, 0);
      arrayMultiTreeNode2.clear();
      assertTrue(arrayMultiTreeNode2.isLeaf());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("rcGJ%;~s#,=Hdi", 0);
      arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      ArrayMultiTreeNode<String> arrayMultiTreeNode1 = new ArrayMultiTreeNode<String>("rcGJ%;~s#,=Hdi");
      arrayMultiTreeNode0.add(arrayMultiTreeNode1);
      boolean boolean0 = arrayMultiTreeNode0.remove(arrayMultiTreeNode1);
      assertFalse(arrayMultiTreeNode0.isRoot());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("rcGJ%;~s#,=Hdi", 0);
      arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode0.isRoot());
      
      boolean boolean0 = arrayMultiTreeNode0.remove(arrayMultiTreeNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(2672);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 2672);
      ArrayMultiTreeNode<ArrayMultiTreeNode<Integer>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<ArrayMultiTreeNode<Integer>>(arrayMultiTreeNode0);
      LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>> linkedMultiTreeNode0 = new LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>(arrayMultiTreeNode1);
      ArrayMultiTreeNode<LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>>(linkedMultiTreeNode0, 10);
      arrayMultiTreeNode2.add(arrayMultiTreeNode2);
      ArrayMultiTreeNode<LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>> arrayMultiTreeNode3 = new ArrayMultiTreeNode<LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>>(linkedMultiTreeNode0, 10);
      boolean boolean0 = arrayMultiTreeNode2.dropSubtree(arrayMultiTreeNode3);
      assertFalse(arrayMultiTreeNode2.isRoot());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(2672);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0, 2672);
      ArrayMultiTreeNode<ArrayMultiTreeNode<Integer>> arrayMultiTreeNode1 = new ArrayMultiTreeNode<ArrayMultiTreeNode<Integer>>(arrayMultiTreeNode0);
      LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>> linkedMultiTreeNode0 = new LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>(arrayMultiTreeNode1);
      ArrayMultiTreeNode<LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<LinkedMultiTreeNode<TreeNode<ArrayMultiTreeNode<Integer>>>>(linkedMultiTreeNode0, 10);
      boolean boolean0 = arrayMultiTreeNode2.dropSubtree(arrayMultiTreeNode2);
      assertTrue(arrayMultiTreeNode2.isLeaf());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>("$YdZNu7q/", 0);
      boolean boolean0 = arrayMultiTreeNode0.dropSubtree((TreeNode<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("rcGJ%;~s#,=Hdi", 0);
      arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      boolean boolean0 = arrayMultiTreeNode0.add(arrayMultiTreeNode0);
      assertFalse(arrayMultiTreeNode0.isLeaf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedMultiTreeNode<String> linkedMultiTreeNode0 = new LinkedMultiTreeNode<String>("3m{G:1p");
      ArrayMultiTreeNode<LinkedMultiTreeNode<String>> arrayMultiTreeNode0 = new ArrayMultiTreeNode<LinkedMultiTreeNode<String>>(linkedMultiTreeNode0);
      boolean boolean0 = arrayMultiTreeNode0.add((TreeNode<LinkedMultiTreeNode<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>((Integer) null);
      arrayMultiTreeNode0.subtrees();
      assertTrue(arrayMultiTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(2656);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Integer>(integer0);
      assertTrue(arrayMultiTreeNode0.isLeaf());
      
      LinkedList<MultiTreeNode<Integer>> linkedList0 = new LinkedList<MultiTreeNode<Integer>>();
      LinkedMultiTreeNode<Integer> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Integer>(integer0);
      linkedList0.add((MultiTreeNode<Integer>) linkedMultiTreeNode0);
      arrayMultiTreeNode0.addSubtrees(linkedList0);
      arrayMultiTreeNode0.subtrees();
      assertFalse(arrayMultiTreeNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayMultiTreeNode<String> arrayMultiTreeNode0 = null;
      try {
        arrayMultiTreeNode0 = new ArrayMultiTreeNode<String>("", (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Branching factor can not be negative
         //
         verifyException("net.mooctest.ArrayMultiTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ArrayMultiTreeNode<Object> arrayMultiTreeNode0 = new ArrayMultiTreeNode<Object>((Object) null);
      Integer integer0 = new Integer(1985);
      ArrayMultiTreeNode<Integer> arrayMultiTreeNode1 = new ArrayMultiTreeNode<Integer>(integer0);
      ArrayMultiTreeNode<MultiTreeNode<Integer>> arrayMultiTreeNode2 = new ArrayMultiTreeNode<MultiTreeNode<Integer>>(arrayMultiTreeNode1, 1985);
      LinkedMultiTreeNode<Object> linkedMultiTreeNode0 = new LinkedMultiTreeNode<Object>(arrayMultiTreeNode2);
      arrayMultiTreeNode0.add(linkedMultiTreeNode0);
      assertTrue(arrayMultiTreeNode2.isLeaf());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayMultiTreeNode0.forEach(consumer0);
      assertFalse(arrayMultiTreeNode0.isLeaf());
  }
}
