/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 01:22:09 GMT 2020
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import net.mooctest.MyTreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MyTreeNode_ESTest extends MyTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MyTreeNode<String> myTreeNode0 = new MyTreeNode<String>(2511, (-1251));
      int int0 = myTreeNode0.getValue();
      assertEquals((-1251), myTreeNode0.getBeta());
      assertEquals(0, int0);
      assertEquals(2511, myTreeNode0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>(10000);
      int int0 = myTreeNode0.getValue();
      assertEquals(10000, int0);
      assertEquals((-10000), myTreeNode0.getAlpha());
      assertEquals(10000, myTreeNode0.getBeta());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MyTreeNode<Integer> myTreeNode0 = new MyTreeNode<Integer>((-3105));
      myTreeNode0.setValue(1599);
      MyTreeNode<Object> myTreeNode1 = new MyTreeNode<Object>((-3105));
      myTreeNode0.addChild(myTreeNode1);
      assertEquals(1599, myTreeNode0.getValue());
      
      myTreeNode1.getParent();
      assertEquals((-3105), myTreeNode1.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MyTreeNode<String> myTreeNode0 = new MyTreeNode<String>(0, 0);
      MyTreeNode<Integer> myTreeNode1 = new MyTreeNode<Integer>(0);
      myTreeNode0.addChild(myTreeNode1);
      MyTreeNode<Object> myTreeNode2 = myTreeNode1.getParent();
      assertEquals(0, myTreeNode2.getValue());
      assertEquals(10000, myTreeNode1.getBeta());
      assertEquals(0, myTreeNode2.getAlpha());
      assertEquals(0, myTreeNode1.getValue());
      assertNotNull(myTreeNode2);
      assertEquals(0, myTreeNode2.getBeta());
      assertEquals((-10000), myTreeNode1.getAlpha());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-3291));
      MyTreeNode<Integer> myTreeNode0 = new MyTreeNode<Integer>(integer0);
      MyTreeNode<String> myTreeNode1 = new MyTreeNode<String>((-1), (-1));
      myTreeNode1.setAlpha(1399);
      myTreeNode1.addChild(myTreeNode0);
      assertEquals(1399, myTreeNode1.getAlpha());
      
      myTreeNode0.getParent();
      assertEquals((-10000), myTreeNode0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MyTreeNode<Integer> myTreeNode0 = new MyTreeNode<Integer>((-3105));
      MyTreeNode<Object> myTreeNode1 = new MyTreeNode<Object>((-3105));
      myTreeNode0.addChild(myTreeNode1);
      MyTreeNode<Object> myTreeNode2 = myTreeNode1.getParent();
      assertEquals(10000, myTreeNode2.getBeta());
      assertEquals((-10000), myTreeNode2.getAlpha());
      assertNotSame(myTreeNode2, myTreeNode1);
      assertEquals((-3105), myTreeNode2.getValue());
      assertNotNull(myTreeNode2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MyTreeNode<MyTreeNode<String>> myTreeNode0 = new MyTreeNode<MyTreeNode<String>>(73, 73);
      myTreeNode0.getData();
      assertEquals(73, myTreeNode0.getBeta());
      assertEquals(0, myTreeNode0.getValue());
      assertEquals(73, myTreeNode0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MyTreeNode<String> myTreeNode0 = new MyTreeNode<String>(0, 0);
      int int0 = myTreeNode0.getBeta();
      assertEquals(0, myTreeNode0.getAlpha());
      assertEquals(0, myTreeNode0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MyTreeNode<Integer> myTreeNode0 = new MyTreeNode<Integer>((-358), (-358));
      int int0 = myTreeNode0.getBeta();
      assertEquals((-358), int0);
      assertEquals((-358), myTreeNode0.getAlpha());
      assertEquals(0, myTreeNode0.getValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>((-3105));
      assertEquals((-10000), myTreeNode0.getAlpha());
      
      myTreeNode0.setAlpha(0);
      int int0 = myTreeNode0.getAlpha();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MyTreeNode<String> myTreeNode0 = new MyTreeNode<String>(1, 1);
      int int0 = myTreeNode0.getAlpha();
      assertEquals(0, myTreeNode0.getValue());
      assertEquals(1, int0);
      assertEquals(1, myTreeNode0.getBeta());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>((Object) null);
      // Undeclared exception!
      try { 
        myTreeNode0.addChildren((List<MyTreeNode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.MyTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>((Object) integer0);
      // Undeclared exception!
      try { 
        myTreeNode0.addChild((MyTreeNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.MyTreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MyTreeNode<MyTreeNode<Object>> myTreeNode0 = new MyTreeNode<MyTreeNode<Object>>((-2547));
      myTreeNode0.getParent();
      assertEquals(10000, myTreeNode0.getBeta());
      assertEquals((-2547), myTreeNode0.getValue());
      assertEquals((-10000), myTreeNode0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MyTreeNode<String> myTreeNode0 = new MyTreeNode<String>("");
      myTreeNode0.getData();
      assertEquals((-10000), myTreeNode0.getAlpha());
      assertEquals(0, myTreeNode0.getValue());
      assertEquals(10000, myTreeNode0.getBeta());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MyTreeNode<MyTreeNode<String>> myTreeNode0 = new MyTreeNode<MyTreeNode<String>>(0);
      int int0 = myTreeNode0.getBeta();
      assertEquals(0, myTreeNode0.getValue());
      assertEquals(10000, int0);
      assertEquals((-10000), myTreeNode0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>((-2547), (-2547));
      MyTreeNode<Integer> myTreeNode1 = new MyTreeNode<Integer>((-2547));
      myTreeNode0.addChild((Object) myTreeNode1);
      assertEquals((-2547), myTreeNode1.getValue());
      assertEquals((-10000), myTreeNode1.getAlpha());
      assertEquals((-2547), myTreeNode0.getAlpha());
      assertEquals((-2547), myTreeNode0.getBeta());
      assertEquals(0, myTreeNode0.getValue());
      assertEquals(10000, myTreeNode1.getBeta());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MyTreeNode<String> myTreeNode0 = new MyTreeNode<String>((-2547));
      int int0 = myTreeNode0.getValue();
      assertEquals((-2547), int0);
      assertEquals((-10000), myTreeNode0.getAlpha());
      assertEquals(10000, myTreeNode0.getBeta());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MyTreeNode<Integer> myTreeNode0 = new MyTreeNode<Integer>((-2547));
      myTreeNode0.setBeta((-2547));
      assertEquals((-2547), myTreeNode0.getBeta());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>((-2547), (-2547));
      int int0 = myTreeNode0.getAlpha();
      assertEquals((-2547), myTreeNode0.getBeta());
      assertEquals(0, myTreeNode0.getValue());
      assertEquals((-2547), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MyTreeNode<Object> myTreeNode0 = new MyTreeNode<Object>((-2547), (-2547));
      MyTreeNode<Integer> myTreeNode1 = new MyTreeNode<Integer>((-2547));
      myTreeNode0.setData(myTreeNode1);
      assertEquals((-2547), myTreeNode1.getValue());
      assertEquals((-10000), myTreeNode1.getAlpha());
      assertEquals(10000, myTreeNode1.getBeta());
      assertEquals((-2547), myTreeNode0.getBeta());
      assertEquals(0, myTreeNode0.getValue());
      assertEquals((-2547), myTreeNode0.getAlpha());
  }
}
