/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 08 01:23:29 GMT 2020
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.Board;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Board_ESTest extends Board_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 1, 1);
      board0.printBoard(stringArray0);
      board0.printBoard(stringArray1);
      board0.makeNodesWhite(stringArray1, 1, 1);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray1, 1, 1);
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, 1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Board board0 = new Board();
      Boolean[][] booleanArrayArray0 = null;
      String[][] stringArray0 = new String[2][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "1";
      stringArray1[0] = ";";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      int int0 = 0;
      // Undeclared exception!
      try { 
        board0.finalizeWhiteMoves((Boolean[][]) null, stringArray0, 0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.printBoard(stringArray1);
      board0.makeNodesBlack(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.printBoard(stringArray1);
      board0.makeNodesWhite(stringArray1, 4, 4);
      board0.printBoard(stringArray1);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray1, 4, 0);
      int int0 = (-1704);
      Boolean[][] booleanArray0 = new Boolean[5][5];
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      booleanArray1[2] = boolean2;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = boolean2;
      booleanArray2[1] = boolean2;
      booleanArray2[2] = boolean0;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[5];
      booleanArray3[0] = boolean1;
      booleanArray3[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean2);
      booleanArray3[2] = boolean3;
      booleanArray3[3] = boolean0;
      booleanArray3[4] = boolean0;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[2];
      booleanArray4[0] = boolean0;
      booleanArray4[1] = boolean3;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[3];
      booleanArray5[0] = boolean2;
      booleanArray5[1] = boolean0;
      booleanArray5[2] = boolean0;
      booleanArray0[4] = booleanArray5;
      // Undeclared exception!
      try { 
        board0.finalizeWhiteMoves(booleanArray0, stringArray0, (-1), 4, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      int int0 = 4;
      board0.makeNodesBlack(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.printBoard(stringArray1);
      board0.makeNodesWhite(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray1, 4, 1);
      board0.makeNodesBlack(stringArray0, 1, 1);
      String[][] stringArray2 = new String[0][5];
      // Undeclared exception!
      try { 
        board0.checkPossibleBlackMoves(stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 6;
      Board board0 = new Board();
      // Undeclared exception!
      try { 
        board0.checkPossibleWhiteMoves((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.printBoard(stringArray1);
      board0.makeNodesWhite(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray1, 4, 0);
      board0.makeNodesBlack(stringArray0, 1, 1);
      String[][] stringArray2 = new String[0][5];
      // Undeclared exception!
      try { 
        board0.checkPossibleBlackMoves(stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      board0.printBoard(stringArray0);
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 0, 0);
      Boolean[][] booleanArray0 = new Boolean[5][0];
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean0 = new Boolean("O");
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(true);
      booleanArray1[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf(false);
      booleanArray1[5] = boolean5;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean3;
      booleanArray2[2] = boolean3;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[8];
      booleanArray3[0] = boolean1;
      booleanArray3[1] = boolean3;
      booleanArray3[2] = boolean5;
      booleanArray3[3] = boolean5;
      booleanArray3[4] = boolean1;
      booleanArray3[5] = boolean4;
      booleanArray3[6] = boolean0;
      booleanArray3[7] = boolean2;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[9];
      booleanArray4[0] = boolean1;
      Boolean boolean6 = new Boolean("O");
      booleanArray4[1] = boolean6;
      booleanArray4[2] = boolean3;
      Boolean boolean7 = new Boolean(false);
      booleanArray4[3] = boolean7;
      booleanArray4[4] = boolean1;
      booleanArray4[5] = boolean0;
      booleanArray4[6] = boolean3;
      booleanArray4[7] = boolean5;
      booleanArray4[8] = boolean3;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[2];
      booleanArray5[0] = boolean6;
      booleanArray5[1] = boolean0;
      booleanArray0[4] = booleanArray5;
      board0.finalizeWhiteMoves(booleanArray0, stringArray1, 1, 0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.printBoard(stringArray1);
      board0.makeNodesWhite(stringArray1, 4, 4);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray1, 4, 0);
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, 1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Board board0 = new Board();
      Boolean[][] booleanArray0 = new Boolean[8][3];
      Boolean[] booleanArray1 = new Boolean[1];
      Boolean boolean0 = new Boolean(";;Aj7as)A_A%@88t/=");
      booleanArray1[0] = boolean0;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[5];
      Boolean boolean1 = Boolean.TRUE;
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      Boolean boolean2 = Boolean.TRUE;
      booleanArray2[4] = boolean2;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[4];
      booleanArray3[0] = boolean1;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean0;
      booleanArray3[3] = boolean2;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[6];
      booleanArray4[0] = boolean0;
      Boolean boolean3 = Boolean.TRUE;
      booleanArray4[1] = boolean3;
      booleanArray4[2] = boolean1;
      booleanArray4[3] = boolean2;
      booleanArray4[4] = boolean2;
      booleanArray4[5] = boolean2;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[7];
      booleanArray5[0] = boolean3;
      booleanArray5[1] = boolean1;
      booleanArray5[2] = boolean3;
      booleanArray5[3] = boolean2;
      Boolean boolean4 = new Boolean(";;Aj7as)A_A%@88t/=");
      booleanArray5[4] = boolean4;
      booleanArray5[5] = boolean0;
      booleanArray5[6] = boolean1;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[4];
      booleanArray6[0] = boolean0;
      booleanArray6[1] = boolean2;
      booleanArray6[2] = boolean4;
      booleanArray6[3] = boolean4;
      booleanArray0[5] = booleanArray6;
      Boolean[] booleanArray7 = new Boolean[9];
      booleanArray7[0] = boolean0;
      booleanArray7[1] = boolean4;
      booleanArray7[2] = boolean0;
      booleanArray7[3] = boolean2;
      booleanArray7[4] = boolean4;
      booleanArray7[5] = boolean2;
      booleanArray7[6] = boolean4;
      booleanArray7[7] = boolean0;
      booleanArray7[8] = boolean3;
      booleanArray0[6] = booleanArray7;
      Boolean[] booleanArray8 = new Boolean[2];
      booleanArray8[0] = boolean4;
      booleanArray8[1] = boolean1;
      booleanArray0[7] = booleanArray8;
      String[][] stringArray0 = new String[9][9];
      String[] stringArray1 = new String[6];
      stringArray1[0] = ";;Aj7as)A_A%@88t/=";
      stringArray1[1] = ";;Aj7as)A_A%@88t/=";
      stringArray1[2] = ";;Aj7as)A_A%@88t/=";
      stringArray1[3] = ";;Aj7as)A_A%@88t/=";
      stringArray1[4] = ";;Aj7as)A_A%@88t/=";
      stringArray1[5] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[5];
      stringArray2[0] = "";
      stringArray2[1] = ";;Aj7as)A_A%@88t/=";
      stringArray2[2] = ";;Aj7as)A_A%@88t/=";
      stringArray2[3] = "O";
      stringArray2[4] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      stringArray3[0] = "";
      stringArray3[1] = "O";
      stringArray3[2] = "";
      stringArray3[3] = "O";
      stringArray3[4] = "";
      stringArray3[5] = "O";
      stringArray3[6] = "";
      stringArray3[7] = "O";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[4];
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "+ -#>VC+xpF'Pa(!`}";
      stringArray4[3] = ";;Aj7as)A_A%@88t/=";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[9];
      stringArray5[0] = "O";
      stringArray5[1] = "";
      stringArray5[2] = "+ -#>VC+xpF'Pa(!`}";
      stringArray5[3] = ";;Aj7as)A_A%@88t/=";
      stringArray5[4] = "+ -#>VC+xpF'Pa(!`}";
      stringArray5[5] = "+ -#>VC+xpF'Pa(!`}";
      stringArray5[6] = ":";
      stringArray5[7] = ";;Aj7as)A_A%@88t/=";
      stringArray5[8] = "*";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[1];
      stringArray6[0] = ":";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[4];
      stringArray7[0] = "";
      stringArray7[1] = "+ -#>VC+xpF'Pa(!`}";
      stringArray7[2] = "*";
      stringArray7[3] = ":";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[1];
      stringArray8[0] = ";;Aj7as)A_A%@88t/=";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[5];
      stringArray9[0] = "";
      stringArray9[1] = "*";
      stringArray9[2] = "";
      stringArray9[3] = "vuT";
      stringArray9[4] = "";
      stringArray0[8] = stringArray9;
      board0.finalizeBlackMoves(booleanArray0, stringArray0, (-2816), 4, (-2816), 4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArrayArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        board0.makeNodesWhite((String[][]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      board0.printBoard(stringArray0);
      board0.makeNodesBlack(stringArray0, 4, 4);
      board0.printBoard(stringArray0);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray0, 4, 4);
      int int0 = (-498);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray0, 1, (-498));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -498
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 7, 7);
      board0.makeNodesWhite(stringArray1, 7, 7);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Board board0 = new Board();
      Boolean[][] booleanArray0 = new Boolean[9][3];
      Boolean[] booleanArray1 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("");
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      booleanArray1[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean0);
      booleanArray1[4] = boolean4;
      Boolean boolean5 = new Boolean("");
      booleanArray1[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean0);
      booleanArray1[6] = boolean6;
      Boolean boolean7 = new Boolean("");
      booleanArray1[7] = boolean7;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = boolean7;
      booleanArray2[1] = boolean4;
      booleanArray2[2] = boolean5;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[9];
      booleanArray3[0] = boolean2;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean2;
      booleanArray3[4] = boolean5;
      booleanArray3[5] = boolean1;
      booleanArray3[6] = boolean5;
      booleanArray3[7] = boolean3;
      booleanArray3[8] = boolean5;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[7];
      booleanArray4[0] = boolean0;
      booleanArray4[1] = boolean4;
      Boolean boolean8 = new Boolean("");
      booleanArray4[2] = boolean8;
      Boolean boolean9 = new Boolean(")");
      booleanArray4[3] = boolean9;
      Boolean boolean10 = Boolean.TRUE;
      booleanArray4[4] = boolean10;
      booleanArray4[5] = boolean1;
      booleanArray4[6] = boolean1;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[8];
      booleanArray5[0] = boolean0;
      booleanArray5[1] = boolean4;
      booleanArray5[2] = boolean7;
      booleanArray5[3] = boolean3;
      booleanArray5[4] = boolean1;
      booleanArray5[5] = boolean10;
      booleanArray5[6] = boolean9;
      booleanArray5[7] = boolean7;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[9];
      Boolean boolean11 = Boolean.valueOf((boolean) boolean1);
      booleanArray6[0] = boolean11;
      booleanArray6[1] = boolean6;
      booleanArray6[2] = boolean9;
      booleanArray6[3] = boolean6;
      Boolean boolean12 = Boolean.valueOf("Cd@Be%hEJi]");
      booleanArray6[4] = boolean12;
      booleanArray6[5] = boolean9;
      booleanArray6[6] = boolean6;
      booleanArray6[7] = boolean6;
      booleanArray6[8] = boolean2;
      booleanArray0[5] = booleanArray6;
      Boolean[] booleanArray7 = new Boolean[0];
      booleanArray0[6] = booleanArray7;
      Boolean[] booleanArray8 = new Boolean[0];
      booleanArray0[7] = booleanArray8;
      Boolean[] booleanArray9 = new Boolean[8];
      booleanArray9[0] = boolean7;
      booleanArray9[1] = boolean8;
      booleanArray9[2] = boolean9;
      Boolean boolean13 = Boolean.valueOf(true);
      booleanArray9[3] = boolean13;
      booleanArray9[4] = boolean4;
      booleanArray9[5] = boolean10;
      booleanArray9[6] = boolean1;
      booleanArray9[7] = boolean9;
      booleanArray0[8] = booleanArray9;
      String[][] stringArray0 = new String[3][9];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "Cd@Be%hEJi]";
      stringArray1[1] = "Cd@Be%hEJi]";
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[6];
      stringArray2[0] = ")";
      stringArray2[1] = "onzi1/D/n _kx;B3";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "Cd@Be%hEJi]";
      stringArray2[5] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[5];
      stringArray3[0] = "X|RYT5";
      stringArray3[1] = "onzi1/D/n _kx;B3";
      stringArray3[2] = "";
      stringArray3[3] = "onzi1/D/n _kx;B3";
      stringArray3[4] = "{-3|i";
      stringArray0[2] = stringArray3;
      board0.finalizeWhiteMoves(booleanArray0, stringArray0, 4, 4, 4, 4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      board0.printBoard(stringArray0);
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 0, 0);
      board0.printBoard(stringArray0);
      board0.makeNodesWhite(stringArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.makeNodesBlack(stringArray1, 4, 4);
      board0.printBoard(stringArray1);
      board0.makeNodesWhite(stringArray1, 4, 4);
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, (-498), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -498
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesBlack(stringArray1, 6, 6);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesWhite(stringArray1, 6, 6);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Boolean[][] booleanArray0 = new Boolean[2][8];
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[2] = boolean1;
      booleanArray0[0] = booleanArray1;
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      int int0 = Boolean.compare(false, true);
      assertEquals((-1), int0);
      
      Boolean boolean3 = new Boolean(false);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray0[1] = booleanArray1;
      board0.finalizeWhiteMoves(booleanArray0, stringArray1, (-461), 902, (-1705), (-892));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = board0.createBoard();
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      board0.checkPossibleWhiteMoves(stringArray0);
      board0.printBoard(stringArray1);
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray1, 0, (-3058));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3057
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesBlack(stringArray1, 0, 0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, 8, (-3243));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3243
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Board board0 = new Board();
      Boolean[][] booleanArray0 = new Boolean[7][1];
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean0 = new Boolean(true);
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean(true);
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      booleanArray1[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean3);
      booleanArray1[5] = boolean5;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[5];
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean4;
      Boolean boolean6 = new Boolean("");
      booleanArray2[2] = boolean6;
      booleanArray2[3] = boolean3;
      booleanArray2[4] = boolean5;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[6];
      booleanArray3[0] = boolean6;
      booleanArray3[1] = boolean5;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean0;
      booleanArray3[4] = boolean2;
      booleanArray3[5] = boolean6;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[4];
      booleanArray4[0] = boolean5;
      booleanArray4[1] = boolean6;
      booleanArray4[2] = boolean1;
      booleanArray4[3] = boolean5;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[1];
      booleanArray5[0] = boolean6;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[8];
      booleanArray6[0] = boolean6;
      Boolean boolean7 = new Boolean(false);
      booleanArray6[1] = boolean7;
      booleanArray6[2] = boolean2;
      booleanArray6[3] = boolean5;
      booleanArray6[4] = boolean3;
      booleanArray6[5] = boolean4;
      booleanArray6[6] = boolean0;
      Boolean boolean8 = Boolean.FALSE;
      booleanArray6[7] = boolean8;
      booleanArray0[5] = booleanArray6;
      Boolean[] booleanArray7 = new Boolean[8];
      booleanArray7[0] = boolean8;
      Boolean boolean9 = Boolean.valueOf(true);
      booleanArray7[1] = boolean9;
      booleanArray7[2] = boolean5;
      booleanArray7[3] = boolean1;
      booleanArray7[4] = boolean3;
      booleanArray7[5] = boolean8;
      booleanArray7[6] = boolean3;
      booleanArray7[7] = boolean7;
      booleanArray0[6] = booleanArray7;
      String[][] stringArray0 = new String[3][5];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      stringArray3[0] = "";
      stringArray3[1] = "";
      stringArray3[2] = "";
      stringArray0[2] = stringArray3;
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Board board0 = new Board();
      Boolean[][] booleanArray0 = new Boolean[6][2];
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      booleanArray1[2] = boolean2;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = boolean2;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean0;
      Boolean boolean3 = Boolean.FALSE;
      booleanArray2[3] = boolean3;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean2;
      booleanArray2[6] = boolean0;
      booleanArray2[7] = boolean1;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[8];
      booleanArray3[0] = boolean0;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean3;
      booleanArray3[4] = boolean2;
      booleanArray3[5] = boolean1;
      booleanArray3[6] = boolean1;
      booleanArray3[7] = boolean2;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[2];
      booleanArray4[0] = boolean0;
      booleanArray4[1] = boolean2;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[3];
      booleanArray5[0] = boolean0;
      booleanArray5[1] = boolean1;
      booleanArray5[2] = boolean1;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[2];
      booleanArray6[0] = boolean1;
      booleanArray6[1] = boolean3;
      booleanArray0[5] = booleanArray6;
      String[][] stringArray0 = new String[7][0];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[21];
      stringArray2[0] = "9Z7";
      stringArray2[1] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      stringArray3[0] = "";
      stringArray3[1] = "";
      stringArray3[2] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray0[3] = stringArray4;
      stringArray0[4] = stringArray2;
      String[] stringArray5 = new String[8];
      stringArray5[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray5[1] = "";
      stringArray5[2] = "";
      stringArray5[3] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray5[4] = "";
      stringArray5[5] = "";
      stringArray5[6] = "9Z7";
      stringArray5[7] = "";
      stringArray0[5] = stringArray5;
      String[] stringArray6 = new String[2];
      stringArray6[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray6[1] = "Y]1\"E7(2W.%;LTUM\"?";
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[4][0];
      Boolean[] booleanArray1 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = new Boolean("");
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray1[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean2);
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray1[6] = boolean6;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean5;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean6;
      booleanArray2[3] = boolean2;
      booleanArray2[4] = boolean1;
      booleanArray2[5] = boolean5;
      booleanArray2[6] = boolean4;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[6];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = boolean6;
      booleanArray3[1] = boolean3;
      booleanArray3[2] = boolean1;
      booleanArray3[3] = boolean0;
      booleanArray3[4] = boolean5;
      booleanArray3[5] = boolean5;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[6];
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      booleanArray4[0] = boolean1;
      booleanArray4[1] = boolean2;
      booleanArray4[2] = boolean0;
      booleanArray4[3] = boolean4;
      booleanArray4[4] = boolean3;
      booleanArray4[5] = boolean1;
      booleanArray0[3] = booleanArray4;
      String[][] stringArray0 = new String[7][9];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "XYiBt";
      stringArray3[1] = "";
      stringArray3[2] = "";
      stringArray3[3] = "";
      stringArray3[4] = "";
      stringArray3[5] = "QYWmP6`$";
      stringArray3[6] = "";
      stringArray3[7] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "XYiBt";
      stringArray4[3] = "QYWmP6`$";
      stringArray4[4] = "QYWmP6`$";
      stringArray4[5] = "XYiBt";
      stringArray4[6] = "QYWmP6`$";
      stringArray4[7] = "QYWmP6`$";
      stringArray4[8] = "";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[5];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray5[0] = "Aue+,4*#*<pU";
      stringArray5[1] = "XYiBt";
      stringArray5[2] = "W=^3LEq(";
      stringArray5[3] = "QYWmP6`$";
      stringArray5[4] = "";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[3];
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray5));
      
      stringArray6[0] = "";
      stringArray6[1] = "Aue+,4*#*<pU";
      stringArray6[2] = "Aue+,4*#*<pU";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray6));
      
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      board0.finalizeWhiteMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[1][0];
      Boolean[] booleanArray1 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean("NA8m9b:5?8x3}odp6");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean1;
      Boolean boolean3 = new Boolean("NA8m9b:5?8x3}odp6");
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertTrue(boolean0.equals((Object)boolean3));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = new Boolean("NA8m9b:5?8x3}odp6");
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[5] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray1[6] = boolean6;
      booleanArray0[0] = booleanArray1;
      String[][] stringArray0 = new String[2][2];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "NA8m9b:5?8x3}odp6";
      stringArray1[1] = "NA8m9b:5?8x3}odp6";
      stringArray1[2] = "NA8m9b:5?8x3}odp6";
      stringArray1[3] = "NA8m9b:5?8x3}odp6";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "NA8m9b:5?8x3}odp6";
      stringArray2[1] = "NA8m9b:5?8x3}odp6";
      stringArray0[1] = stringArray2;
      // Undeclared exception!
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray1, (-713), 1075);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -712
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[2][9];
      Boolean[] booleanArray1 = new Boolean[6];
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("X");
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = new Boolean(boolean0);
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf("lU@yl0Gy!Z):");
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray1[5] = boolean6;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean2;
      booleanArray0[1] = booleanArray2;
      String[][] stringArray0 = new String[9][2];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "lU@yl0Gy!Z):";
      stringArray1[1] = "X";
      stringArray1[2] = "X";
      stringArray1[3] = "X";
      stringArray1[4] = "lU@yl0Gy!Z):";
      stringArray1[5] = "lU@yl0Gy!Z):";
      stringArray1[6] = "X";
      stringArray1[7] = "lU@yl0Gy!Z):";
      stringArray1[8] = "lU@yl0Gy!Z):";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "X";
      stringArray2[1] = "lU@yl0Gy!Z):";
      stringArray2[2] = "lU@yl0Gy!Z):";
      stringArray2[3] = "X";
      stringArray2[4] = "lU@yl0Gy!Z):";
      stringArray2[5] = "lU@yl0Gy!Z):";
      stringArray2[6] = "lU@yl0Gy!Z):";
      stringArray2[7] = "X";
      stringArray2[8] = "lU@yl0Gy!Z):";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "o";
      stringArray3[1] = "lU@yl0Gy!Z):";
      stringArray3[2] = "lU@yl0Gy!Z):";
      stringArray3[3] = "X";
      stringArray3[4] = "X";
      stringArray3[5] = "SU9QDf{";
      stringArray3[6] = "X";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      stringArray4[0] = "lU@yl0Gy!Z):";
      stringArray4[1] = "IVA0{<U";
      stringArray4[2] = "SU9QDf{";
      stringArray4[3] = "SU9QDf{";
      stringArray4[4] = "X";
      stringArray4[5] = "X";
      stringArray4[6] = "";
      stringArray4[7] = "X";
      stringArray4[8] = "SU9QDf{";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[7];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      
      stringArray5[0] = "o";
      stringArray5[1] = "";
      stringArray5[2] = "SU9QDf{";
      stringArray5[3] = "o";
      stringArray5[4] = "pPXpCEMrnp^P";
      stringArray5[5] = "X";
      stringArray5[6] = "";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[6];
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray5));
      
      stringArray6[0] = "X";
      stringArray6[1] = "pPXpCEMrnp^P";
      stringArray6[2] = "pPXpCEMrnp^P";
      stringArray6[3] = "IVA0{<U";
      stringArray6[4] = "o";
      stringArray6[5] = "lU@yl0Gy!Z):";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray5));
      
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[8];
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray2));
      
      stringArray8[0] = "pPXpCEMrnp^P";
      stringArray8[1] = "X";
      stringArray8[2] = "";
      stringArray8[3] = "X";
      stringArray8[4] = "lU@yl0Gy!Z):";
      stringArray8[5] = "o";
      stringArray8[6] = "IVA0{<U";
      stringArray8[7] = "SU9QDf{";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[5];
      assertFalse(stringArray9.equals((Object)stringArray8));
      assertFalse(stringArray9.equals((Object)stringArray4));
      assertFalse(stringArray9.equals((Object)stringArray3));
      assertFalse(stringArray9.equals((Object)stringArray5));
      assertFalse(stringArray9.equals((Object)stringArray1));
      assertFalse(stringArray9.equals((Object)stringArray2));
      assertFalse(stringArray9.equals((Object)stringArray6));
      assertFalse(stringArray9.equals((Object)stringArray7));
      
      stringArray9[0] = "X";
      stringArray9[1] = "lU@yl0Gy!Z):";
      stringArray9[2] = "SU9QDf{";
      stringArray9[3] = "SU9QDf{";
      stringArray9[4] = "X";
      stringArray0[8] = stringArray9;
      board0.finalizeWhiteMoves(booleanArray0, stringArray0, (-1558), 110, 110, 110);
      assertEquals(2, booleanArray0.length);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[3][8];
      Boolean[] booleanArray1 = new Boolean[8];
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = new Boolean(true);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean3));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean4));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray1[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertNotNull(boolean7);
      assertTrue(boolean7);
      
      booleanArray1[7] = boolean7;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean2;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean0;
      booleanArray2[3] = boolean0;
      Boolean boolean8 = new Boolean("");
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean0));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray2[4] = boolean8;
      Boolean boolean9 = Boolean.valueOf("");
      assertFalse(boolean9.equals((Object)boolean4));
      assertTrue(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean3));
      assertTrue(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean6));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray2[5] = boolean9;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[5];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = boolean8;
      booleanArray3[1] = boolean6;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean0;
      booleanArray3[4] = boolean0;
      booleanArray0[2] = booleanArray3;
      String[][] stringArray0 = new String[4][2];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray1[8] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "";
      stringArray2[5] = ",VHJ'OYvmH6n.\"n:";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray2[8] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[6];
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "";
      stringArray4[1] = ",VHJ'OYvmH6n.\"n:";
      stringArray4[2] = ",VHJ'OYvmH6n.\"n:";
      stringArray4[3] = ",VHJ'OYvmH6n.\"n:";
      stringArray4[4] = ",VHJ'OYvmH6n.\"n:";
      stringArray4[5] = ",VHJ'OYvmH6n.\"n:";
      stringArray0[3] = stringArray4;
      // Undeclared exception!
      try { 
        board0.finalizeBlackMoves(booleanArray0, stringArray0, (-1), (-1), 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[2][3];
      Boolean[] booleanArray1 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean0;
      booleanArray2[2] = boolean1;
      booleanArray2[3] = boolean1;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean1;
      booleanArray2[6] = boolean0;
      booleanArray2[7] = boolean0;
      booleanArray0[1] = booleanArray2;
      String[][] stringArray0 = new String[0][1];
      board0.finalizeWhiteMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArrayArray0 = null;
      // Undeclared exception!
      try { 
        board0.checkPossibleBlackMoves((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[6][2];
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray1[2] = boolean2;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean2;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean0;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray2[3] = boolean3;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean2;
      booleanArray2[6] = boolean0;
      booleanArray2[7] = boolean1;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[8];
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      
      booleanArray3[0] = boolean0;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean3;
      booleanArray3[4] = boolean2;
      booleanArray3[5] = boolean1;
      booleanArray3[6] = boolean1;
      booleanArray3[7] = boolean2;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[2];
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = boolean0;
      booleanArray4[1] = boolean2;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[3];
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      
      booleanArray5[0] = boolean0;
      booleanArray5[1] = boolean1;
      booleanArray5[2] = boolean1;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[2];
      assertFalse(booleanArray6.equals((Object)booleanArray1));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      assertFalse(booleanArray6.equals((Object)booleanArray2));
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      
      booleanArray6[0] = boolean1;
      booleanArray6[1] = boolean3;
      booleanArray0[5] = booleanArray6;
      String[][] stringArray0 = new String[7][0];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "9Z7";
      stringArray2[1] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "";
      stringArray3[1] = "";
      stringArray3[2] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "9Z7";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[4];
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      
      stringArray5[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray5[1] = "9Z7";
      stringArray5[2] = "";
      stringArray5[3] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[8];
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray4));
      
      stringArray6[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray6[1] = "";
      stringArray6[2] = "";
      stringArray6[3] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray6[4] = "";
      stringArray6[5] = "";
      stringArray6[6] = "9Z7";
      stringArray6[7] = "";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[2];
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray3));
      
      stringArray7[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray7[1] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      try { 
        board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArrayArray0 = null;
      // Undeclared exception!
      try { 
        board0.printBoard((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArrayArray0 = null;
      // Undeclared exception!
      try { 
        board0.makeNodesBlack((String[][]) null, 1, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[3][4];
      Boolean[] booleanArray1 = new Boolean[6];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean(",.HQ|4m{JtZ");
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("3zD");
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = new Boolean((boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("4");
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[5] = boolean5;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[1];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean4;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[5];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean2;
      Boolean boolean6 = new Boolean("");
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray3[1] = boolean6;
      Boolean boolean7 = new Boolean("4");
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray3[2] = boolean7;
      booleanArray3[3] = boolean3;
      booleanArray3[4] = boolean3;
      booleanArray0[2] = booleanArray3;
      board0.finalizeWhiteMoves(booleanArray0, (String[][]) null, (-1950), (-1898), 2339, (-1898));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[1][9];
      Boolean[] booleanArray1 = new Boolean[4];
      Boolean boolean0 = new Boolean("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf("w>}|(_rHP");
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      booleanArray0[0] = booleanArray1;
      String[][] stringArray0 = new String[1][4];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "w>}|(_rHP";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray0[0] = stringArray1;
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 4, (-1105), 1, 0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[4][6];
      Boolean[] booleanArray1 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean1;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean3;
      booleanArray2[3] = boolean0;
      Boolean boolean5 = Boolean.TRUE;
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray2[4] = boolean5;
      booleanArray2[5] = boolean2;
      booleanArray2[6] = boolean2;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean2;
      booleanArray3[1] = boolean2;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[1];
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      
      booleanArray4[0] = boolean4;
      booleanArray0[3] = booleanArray4;
      String[][] stringArray0 = new String[5][6];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "N";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[6];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "N";
      stringArray4[1] = "";
      stringArray4[2] = "";
      stringArray4[3] = "N";
      stringArray4[4] = "";
      stringArray4[5] = "N";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[1];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray5[0] = "";
      stringArray0[4] = stringArray5;
      // Undeclared exception!
      try { 
        board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 8, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[3][8];
      Boolean[] booleanArray1 = new Boolean[7];
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = new Boolean("");
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("");
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray1[6] = boolean6;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Boolean boolean7 = Boolean.valueOf("");
      assertTrue(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray2[0] = boolean7;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean3;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[2];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean4;
      booleanArray3[1] = boolean3;
      booleanArray0[2] = booleanArray3;
      board0.finalizeBlackMoves(booleanArray0, (String[][]) null, 0, 1670, (-1893), 1670);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      board0.printBoard(stringArray0);
      assertEquals(8, stringArray0.length);
      
      board0.printBoard(stringArray0);
      assertEquals(8, stringArray0.length);
      
      String[][] stringArray1 = board0.createBoard();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[][] stringArray2 = board0.createBoard();
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(8, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int0 = 0;
      int int1 = 1014;
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray2, 0, 1014);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1014
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[1][9];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "aAsCx?B&(JKX:)oCoI";
      String string0 = "X";
      // Undeclared exception!
      try { 
        board0.printBoard(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[2][0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "1";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray0[1] = stringArray2;
      board0.finalizeWhiteMoves((Boolean[][]) null, stringArray0, 0, 0, (-4106), 0);
      assertEquals(2, stringArray0.length);
      
      board0.finalizeWhiteMoves((Boolean[][]) null, stringArray0, 0, (-4106), 0, 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[4][3];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "ao [j([lv)MA1As";
      stringArray1[1] = "QNBST6es";
      stringArray1[2] = "";
      stringArray1[3] = "Ld#NK|\"W";
      stringArray1[4] = "";
      stringArray1[5] = "m%OC{_@@C";
      stringArray1[6] = "";
      stringArray1[7] = "`U;|v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[6];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "0_Pl^?b5";
      stringArray2[2] = "m%OC{_@@C";
      stringArray2[3] = "QNBST6es";
      stringArray2[4] = "";
      stringArray2[5] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "0_Pl^?b5";
      stringArray3[1] = "`U;|v";
      stringArray3[2] = "";
      stringArray3[3] = "";
      stringArray3[4] = "";
      stringArray3[5] = "ao [j([lv)MA1As";
      stringArray3[6] = "";
      stringArray3[7] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[5];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "QNBST6es";
      stringArray4[1] = "";
      stringArray4[2] = "";
      stringArray4[3] = "QNBST6es";
      stringArray4[4] = "m%OC{_@@C";
      stringArray0[3] = stringArray4;
      // Undeclared exception!
      try { 
        board0.finalizeBlackMoves((Boolean[][]) null, stringArray0, 0, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      Boolean[][] booleanArray0 = new Boolean[1][9];
      Boolean[] booleanArray1 = new Boolean[9];
      Boolean boolean0 = new Boolean("0E._LP|N(|:$");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf("0E._LP|N(|:$");
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = new Boolean(true);
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray1[4] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean0.equals((Object)boolean5));
      assertTrue(boolean0.equals((Object)boolean3));
      assertFalse(boolean0.equals((Object)boolean4));
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean2));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray1[6] = boolean6;
      Boolean boolean7 = Boolean.valueOf(false);
      assertFalse(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean0));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray1[7] = boolean7;
      Boolean boolean8 = Boolean.valueOf(true);
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean1));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean6));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray1[8] = boolean8;
      booleanArray0[0] = booleanArray1;
      // Undeclared exception!
      try { 
        board0.finalizeWhiteMoves(booleanArray0, stringArray0, 0, 0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[9][4];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "j,Co";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = ")";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "j,Co";
      stringArray2[1] = "";
      stringArray2[2] = "  01234567";
      stringArray2[3] = ")";
      stringArray2[4] = "";
      stringArray2[5] = "j,Co";
      stringArray2[6] = ")";
      stringArray2[7] = "j,Co";
      stringArray2[8] = ")";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[5];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "j,Co";
      stringArray3[1] = "";
      stringArray3[2] = "";
      stringArray3[3] = "";
      stringArray3[4] = "  01234567";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "\"g";
      stringArray4[1] = ")";
      stringArray4[2] = "j,Co";
      stringArray4[3] = "'EvR(Dai0r<";
      stringArray4[4] = "  01234567";
      stringArray4[5] = "j,Co";
      stringArray4[6] = "  01234567";
      stringArray4[7] = "";
      stringArray4[8] = "  01234567";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[2];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray5[0] = ")";
      stringArray5[1] = "j,Co";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray4));
      
      stringArray6[0] = "";
      stringArray6[1] = "";
      stringArray6[2] = "`{b$-~3T.%";
      stringArray6[3] = "";
      stringArray6[4] = "^PU-:@z3myOPtJu";
      stringArray6[5] = "  01234567";
      stringArray6[6] = "  01234567";
      stringArray6[7] = "'EvR(Dai0r<";
      stringArray6[8] = "j,Co";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[3];
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray1));
      
      stringArray7[0] = ")";
      stringArray7[1] = ":b#cD46uVj6";
      stringArray7[2] = "'EvR(Dai0r<";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[7];
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray7));
      
      stringArray8[0] = "'EvR(Dai0r<";
      stringArray8[1] = "'EvR(Dai0r<";
      stringArray8[2] = "`{b$-~3T.%";
      stringArray8[3] = "'EvR(Dai0r<";
      stringArray8[4] = ":b#cD46uVj6";
      stringArray8[5] = "$p5d!HDf(qc";
      stringArray8[6] = "\"g";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[9];
      assertFalse(stringArray9.equals((Object)stringArray7));
      assertFalse(stringArray9.equals((Object)stringArray8));
      assertFalse(stringArray9.equals((Object)stringArray4));
      assertFalse(stringArray9.equals((Object)stringArray1));
      assertFalse(stringArray9.equals((Object)stringArray2));
      assertFalse(stringArray9.equals((Object)stringArray5));
      assertFalse(stringArray9.equals((Object)stringArray3));
      assertFalse(stringArray9.equals((Object)stringArray6));
      
      stringArray9[0] = "";
      stringArray9[1] = "";
      stringArray9[2] = ">";
      stringArray9[3] = "  01234567";
      stringArray9[4] = ":b#cD46uVj6";
      stringArray9[5] = "^PU-:@z3myOPtJu";
      stringArray9[6] = "'EvR(Dai0r<";
      stringArray9[7] = "";
      stringArray9[8] = ":b#cD46uVj6";
      stringArray0[8] = stringArray9;
      // Undeclared exception!
      try { 
        board0.checkPossibleWhiteMoves(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[0][6];
      board0.finalizeBlackMoves(booleanArray0, (String[][]) null, 1859, 1859, (-654), (-3571));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[8][5];
      String[] stringArray1 = new String[9];
      stringArray1[0] = ".";
      stringArray1[1] = "O";
      stringArray1[2] = "H3[.z;J";
      stringArray1[3] = "";
      stringArray1[4] = "a*1G";
      stringArray1[5] = "Ve];nbm|";
      stringArray1[6] = "";
      stringArray1[7] = " ";
      stringArray1[8] = "Y'<)N-!TSg`iMk_Zj:";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "Y'<)N-!TSg`iMk_Zj:";
      stringArray2[3] = "H3[.z;J";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[2];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = " ";
      stringArray3[1] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[8];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      stringArray4[0] = "H3[.z;J";
      stringArray4[1] = ".";
      stringArray4[2] = "";
      stringArray4[3] = "";
      stringArray4[4] = "a*1G";
      stringArray4[5] = "";
      stringArray4[6] = "H3[.z;J";
      stringArray4[7] = "Y'<)N-!TSg`iMk_Zj:";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[8];
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      
      stringArray5[0] = "H3[.z;J";
      stringArray5[1] = "Ve];nbm|";
      stringArray5[2] = "a*1G";
      stringArray5[3] = ".";
      stringArray5[4] = "Y'<)N-!TSg`iMk_Zj:";
      stringArray5[5] = "H3[.z;J";
      stringArray5[6] = "";
      stringArray5[7] = "Ve];nbm|";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[2];
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray3));
      
      stringArray6[0] = "";
      stringArray6[1] = "";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[1];
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray2));
      
      stringArray7[0] = "";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[3];
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray6));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray1));
      
      stringArray8[0] = "O";
      stringArray8[1] = " ";
      stringArray8[2] = ".";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray0, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[0][5];
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray0, 2056, 2056);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray1, (-713), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -713
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[4][4];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "C:`m*f5s6As)ax";
      stringArray1[3] = "X";
      stringArray1[4] = "M4v-GoKC'>IpV9]t7PV";
      stringArray1[5] = "net.mooctest.Board";
      stringArray1[6] = "";
      stringArray1[7] = "=kn+t`mejSW*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[4];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "net.mooctest.Board";
      stringArray3[1] = "";
      stringArray3[2] = "M4v-GoKC'>IpV9]t7PV";
      stringArray3[3] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[8];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      stringArray4[0] = "C:`m*f5s6As)ax";
      stringArray4[1] = "X";
      stringArray4[2] = "";
      stringArray4[3] = "net.mooctest.Board";
      stringArray4[4] = "M4v-GoKC'>IpV9]t7PV";
      stringArray4[5] = "";
      stringArray4[6] = "C:`m*f5s6As)ax";
      stringArray4[7] = "X";
      stringArray0[3] = stringArray4;
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[5][9];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "*";
      stringArray1[1] = "Vf";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "Vf";
      stringArray2[1] = "Vf";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "*";
      stringArray2[5] = "";
      stringArray2[6] = "";
      stringArray2[7] = "";
      stringArray2[8] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "*";
      stringArray3[1] = "*";
      stringArray3[2] = "Vf";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[6];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      
      stringArray4[0] = "";
      stringArray4[1] = "Vf";
      stringArray4[2] = "";
      stringArray4[3] = "Vf";
      stringArray4[4] = "";
      stringArray4[5] = "Vf";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[9];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      
      stringArray5[0] = "";
      stringArray5[1] = "*";
      stringArray5[2] = "";
      stringArray5[3] = "";
      stringArray5[4] = "";
      stringArray5[5] = "*";
      stringArray5[6] = "";
      stringArray5[7] = "";
      stringArray5[8] = "";
      stringArray0[4] = stringArray5;
      // Undeclared exception!
      try { 
        board0.printBoard(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[0][5];
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[0][4];
      // Undeclared exception!
      try { 
        board0.printBoard(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[9][9];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "f4X0pten%DFmhMc))s";
      stringArray1[1] = "}Bg.";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "}Bg.";
      stringArray2[1] = "f4X0pten%DFmhMc))s";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "]0m<z1/Bf";
      stringArray3[1] = "}Bg.";
      stringArray3[2] = "f4X0pten%DFmhMc))s";
      stringArray3[3] = "}Bg.";
      stringArray3[4] = "f4X0pten%DFmhMc))s";
      stringArray3[5] = "}Bg.";
      stringArray3[6] = "f4X0pten%DFmhMc))s";
      stringArray3[7] = "}Bg.";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[4];
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      stringArray4[0] = "}Bg.";
      stringArray4[1] = "!}";
      stringArray4[2] = "";
      stringArray4[3] = "f4X0pten%DFmhMc))s";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[0];
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[4];
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      
      stringArray6[0] = "}Bg.";
      stringArray6[1] = "|vkCq3C<";
      stringArray6[2] = "!}";
      stringArray6[3] = "f4X0pten%DFmhMc))s";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[9];
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray3));
      
      stringArray7[0] = "f4X0pten%DFmhMc))s";
      stringArray7[1] = "]0m<z1/Bf";
      stringArray7[2] = "lWd)IpO&|8}jM";
      stringArray7[3] = "";
      stringArray7[4] = "";
      stringArray7[5] = "";
      stringArray7[6] = "|vkCq3C<";
      stringArray7[7] = "f4X0pten%DFmhMc))s";
      stringArray7[8] = "!}";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[9];
      assertFalse(stringArray8.equals((Object)stringArray2));
      assertFalse(stringArray8.equals((Object)stringArray7));
      assertFalse(stringArray8.equals((Object)stringArray4));
      assertFalse(stringArray8.equals((Object)stringArray1));
      assertFalse(stringArray8.equals((Object)stringArray3));
      assertFalse(stringArray8.equals((Object)stringArray5));
      assertFalse(stringArray8.equals((Object)stringArray6));
      
      stringArray8[0] = "lWd)IpO&|8}jM";
      stringArray8[1] = "";
      stringArray8[2] = "";
      stringArray8[3] = "!}";
      stringArray8[4] = "]0m<z1/Bf";
      stringArray8[5] = "";
      stringArray8[6] = "f4X0pten%DFmhMc))s";
      stringArray8[7] = "|vkCq3C<";
      stringArray8[8] = "";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[7];
      assertFalse(stringArray9.equals((Object)stringArray5));
      assertFalse(stringArray9.equals((Object)stringArray2));
      assertFalse(stringArray9.equals((Object)stringArray8));
      assertFalse(stringArray9.equals((Object)stringArray6));
      assertFalse(stringArray9.equals((Object)stringArray7));
      assertFalse(stringArray9.equals((Object)stringArray4));
      assertFalse(stringArray9.equals((Object)stringArray1));
      assertFalse(stringArray9.equals((Object)stringArray3));
      
      stringArray9[0] = "}Bg.";
      stringArray9[1] = "]0m<z1/Bf";
      stringArray9[2] = "";
      stringArray9[3] = "";
      stringArray9[4] = "";
      stringArray9[5] = "f4X0pten%DFmhMc))s";
      stringArray9[6] = "!}";
      stringArray0[8] = stringArray9;
      // Undeclared exception!
      try { 
        board0.checkPossibleBlackMoves(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      // Undeclared exception!
      try { 
        board0.checkPossibleBlackMoves((String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[9][3];
      Boolean[] booleanArray1 = new Boolean[8];
      Boolean boolean0 = Boolean.valueOf("");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      booleanArray1[2] = boolean2;
      booleanArray1[3] = boolean0;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[4] = boolean3;
      Boolean boolean4 = new Boolean("");
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[5] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean0.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertFalse(boolean5);
      
      booleanArray1[6] = boolean5;
      Boolean boolean6 = new Boolean("");
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray1[7] = boolean6;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean6;
      booleanArray2[1] = boolean3;
      booleanArray2[2] = boolean4;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[9];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean2;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean2;
      booleanArray3[4] = boolean4;
      booleanArray3[5] = boolean1;
      booleanArray3[6] = boolean4;
      booleanArray3[7] = boolean2;
      booleanArray3[8] = boolean4;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[7];
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      booleanArray4[0] = boolean0;
      booleanArray4[1] = boolean3;
      Boolean boolean7 = new Boolean("");
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray4[2] = boolean7;
      booleanArray4[3] = boolean0;
      Boolean boolean8 = Boolean.TRUE;
      assertFalse(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean1));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray4[4] = boolean8;
      booleanArray4[5] = boolean1;
      booleanArray4[6] = boolean1;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[8];
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      
      booleanArray5[0] = boolean0;
      booleanArray5[1] = boolean3;
      booleanArray5[2] = boolean6;
      booleanArray5[3] = boolean0;
      booleanArray5[4] = boolean1;
      booleanArray5[5] = boolean8;
      booleanArray5[6] = boolean2;
      booleanArray5[7] = boolean6;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[9];
      assertFalse(booleanArray6.equals((Object)booleanArray2));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      assertFalse(booleanArray6.equals((Object)booleanArray1));
      
      Boolean boolean9 = Boolean.valueOf((boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean5));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean4));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean6));
      assertFalse(boolean1.equals((Object)boolean8));
      assertTrue(boolean1.equals((Object)boolean7));
      assertTrue(boolean9.equals((Object)boolean6));
      assertTrue(boolean9.equals((Object)boolean1));
      assertTrue(boolean9.equals((Object)boolean7));
      assertFalse(boolean9.equals((Object)boolean8));
      assertTrue(boolean9.equals((Object)boolean4));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray6[0] = boolean9;
      booleanArray6[2] = boolean4;
      booleanArray6[3] = boolean5;
      Boolean boolean10 = Boolean.valueOf("Cd@Be%hEJi]");
      assertTrue(boolean10.equals((Object)boolean4));
      assertFalse(boolean10.equals((Object)boolean8));
      assertTrue(boolean10.equals((Object)boolean7));
      assertTrue(boolean10.equals((Object)boolean6));
      assertTrue(boolean10.equals((Object)boolean1));
      assertNotNull(boolean10);
      assertFalse(boolean10);
      
      booleanArray6[4] = boolean10;
      booleanArray6[5] = boolean1;
      booleanArray6[6] = boolean5;
      booleanArray6[7] = boolean5;
      booleanArray6[8] = boolean2;
      booleanArray0[5] = booleanArray6;
      Boolean[] booleanArray7 = new Boolean[0];
      assertFalse(booleanArray7.equals((Object)booleanArray6));
      assertFalse(booleanArray7.equals((Object)booleanArray3));
      assertFalse(booleanArray7.equals((Object)booleanArray2));
      assertFalse(booleanArray7.equals((Object)booleanArray4));
      assertFalse(booleanArray7.equals((Object)booleanArray1));
      assertFalse(booleanArray7.equals((Object)booleanArray5));
      
      booleanArray0[6] = booleanArray7;
      Boolean[] booleanArray8 = new Boolean[0];
      assertFalse(booleanArray8.equals((Object)booleanArray1));
      assertFalse(booleanArray8.equals((Object)booleanArray6));
      assertFalse(booleanArray8.equals((Object)booleanArray5));
      assertFalse(booleanArray8.equals((Object)booleanArray3));
      assertFalse(booleanArray8.equals((Object)booleanArray7));
      assertFalse(booleanArray8.equals((Object)booleanArray4));
      assertFalse(booleanArray8.equals((Object)booleanArray2));
      
      booleanArray0[7] = booleanArray8;
      Boolean[] booleanArray9 = new Boolean[8];
      assertFalse(booleanArray9.equals((Object)booleanArray2));
      assertFalse(booleanArray9.equals((Object)booleanArray3));
      assertFalse(booleanArray9.equals((Object)booleanArray5));
      assertFalse(booleanArray9.equals((Object)booleanArray4));
      assertFalse(booleanArray9.equals((Object)booleanArray6));
      assertFalse(booleanArray9.equals((Object)booleanArray8));
      assertFalse(booleanArray9.equals((Object)booleanArray7));
      assertFalse(booleanArray9.equals((Object)booleanArray1));
      
      booleanArray9[0] = boolean6;
      booleanArray9[1] = boolean7;
      booleanArray9[2] = boolean0;
      Boolean boolean11 = Boolean.valueOf(true);
      assertFalse(boolean11.equals((Object)boolean10));
      assertFalse(boolean11.equals((Object)boolean2));
      assertFalse(boolean11.equals((Object)boolean9));
      assertFalse(boolean11.equals((Object)boolean4));
      assertFalse(boolean11.equals((Object)boolean5));
      assertFalse(boolean11.equals((Object)boolean7));
      assertFalse(boolean11.equals((Object)boolean3));
      assertFalse(boolean11.equals((Object)boolean1));
      assertFalse(boolean11.equals((Object)boolean6));
      assertFalse(boolean11.equals((Object)boolean0));
      assertNotNull(boolean11);
      assertTrue(boolean11);
      
      booleanArray9[3] = boolean11;
      booleanArray9[4] = boolean3;
      booleanArray9[5] = boolean8;
      booleanArray9[6] = boolean1;
      booleanArray9[7] = boolean0;
      booleanArray0[8] = booleanArray9;
      String[][] stringArray0 = new String[3][9];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "Cd@Be%hEJi]";
      stringArray1[1] = "Cd@Be%hEJi]";
      stringArray1[2] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[6];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = ")";
      stringArray2[1] = "onzi1/D/n _kx;B3";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray2[4] = "Cd@Be%hEJi]";
      stringArray2[5] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[5];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "X|RYT5";
      stringArray3[1] = "onzi1/D/n _kx;B3";
      stringArray3[2] = "";
      stringArray3[3] = "onzi1/D/n _kx;B3";
      stringArray3[4] = "{-3|i";
      stringArray0[2] = stringArray3;
      board0.finalizeWhiteMoves(booleanArray0, stringArray0, 4, 4, 4, 4);
      assertEquals(9, booleanArray0.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[5][5];
      String[] stringArray1 = new String[8];
      String string0 = "";
      stringArray1[2] = "";
      String string1 = "]<{{ N";
      stringArray1[3] = "]<{{ N";
      String string2 = "'0vR<<yFVjK";
      stringArray1[4] = "'0vR<<yFVjK";
      stringArray1[5] = "Q;rdDyJ4ah~";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[4];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "'0vR<<yFVjK";
      stringArray3[1] = "]<{{ N";
      stringArray3[2] = "'0vR<<yFVjK";
      stringArray3[3] = "Q;rdDyJ4ah~";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[4];
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      
      // Undeclared exception!
      try { 
        board0.printBoard(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[4][0];
      Boolean[] booleanArray1 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      boolean boolean1 = true;
      Boolean boolean2 = new Boolean(true);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = Boolean.TRUE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = Boolean.valueOf(boolean1);
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean3));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray1[4] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray1[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf((boolean) boolean3);
      assertTrue(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean5));
      assertFalse(boolean3.equals((Object)boolean6));
      assertFalse(boolean3.equals((Object)boolean4));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray1[6] = boolean7;
      booleanArray0[0] = booleanArray1;
      booleanArray0[1] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean7;
      booleanArray2[1] = boolean4;
      booleanArray2[2] = boolean2;
      booleanArray2[3] = boolean0;
      booleanArray2[4] = boolean6;
      booleanArray2[5] = boolean0;
      Boolean[] booleanArray3 = new Boolean[6];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean2;
      booleanArray3[1] = boolean3;
      booleanArray3[2] = boolean0;
      booleanArray3[3] = boolean5;
      booleanArray3[4] = boolean4;
      booleanArray3[5] = boolean2;
      booleanArray0[1] = booleanArray3;
      String[][] stringArray0 = new String[7][9];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray2[3] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      stringArray3[0] = "XYiBt";
      stringArray3[1] = "";
      stringArray3[2] = "";
      stringArray3[3] = "";
      stringArray3[4] = "";
      stringArray3[5] = "QYWmP6`$";
      stringArray3[6] = "";
      stringArray3[7] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray4[0] = "";
      stringArray4[1] = "";
      stringArray4[2] = "XYiBt";
      stringArray4[3] = "QYWmP6`$";
      stringArray4[4] = "QYWmP6`$";
      stringArray4[5] = "XYiBt";
      stringArray4[6] = "QYWmP6`$";
      stringArray4[7] = "QYWmP6`$";
      stringArray4[8] = "";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[5];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      
      stringArray5[0] = "Aue+,4*#*<pU";
      stringArray5[1] = "XYiBt";
      stringArray5[2] = "W=^3LEq(";
      stringArray5[3] = "QYWmP6`$";
      stringArray5[4] = "";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[3];
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray1));
      
      stringArray6[0] = "";
      stringArray6[1] = "Aue+,4*#*<pU";
      stringArray6[2] = "Aue+,4*#*<pU";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[0];
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray6));
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray5));
      
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      board0.finalizeWhiteMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[6][2];
      Boolean[] booleanArray1 = new Boolean[3];
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray1[2] = boolean2;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[8];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean2;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean0;
      Boolean boolean3 = Boolean.FALSE;
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      booleanArray2[3] = boolean3;
      booleanArray2[4] = boolean0;
      booleanArray2[5] = boolean2;
      booleanArray2[6] = boolean0;
      booleanArray2[7] = boolean1;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[8];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean0;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean2;
      booleanArray3[3] = boolean3;
      booleanArray3[4] = boolean2;
      booleanArray3[5] = boolean1;
      booleanArray3[6] = boolean1;
      booleanArray3[7] = boolean2;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[2];
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      
      booleanArray4[0] = boolean0;
      booleanArray4[1] = boolean2;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[3];
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      
      booleanArray5[0] = boolean0;
      booleanArray5[1] = boolean1;
      booleanArray5[2] = boolean1;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[2];
      assertFalse(booleanArray6.equals((Object)booleanArray2));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      assertFalse(booleanArray6.equals((Object)booleanArray1));
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      
      booleanArray6[0] = boolean1;
      booleanArray6[1] = boolean3;
      booleanArray0[5] = booleanArray5;
      String[][] stringArray0 = new String[7][0];
      String[] stringArray1 = new String[5];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "9Z7";
      stringArray2[1] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "";
      stringArray3[1] = "";
      stringArray3[2] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[4];
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray1));
      
      stringArray5[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray5[1] = "9Z7";
      stringArray5[2] = "";
      stringArray5[3] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[8];
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      
      stringArray6[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray6[1] = "";
      stringArray6[2] = "";
      stringArray6[3] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray6[4] = "";
      stringArray6[5] = "";
      stringArray6[6] = "9Z7";
      stringArray6[7] = "";
      String[] stringArray7 = new String[2];
      assertFalse(stringArray7.equals((Object)stringArray2));
      assertFalse(stringArray7.equals((Object)stringArray1));
      assertFalse(stringArray7.equals((Object)stringArray3));
      assertFalse(stringArray7.equals((Object)stringArray5));
      assertFalse(stringArray7.equals((Object)stringArray4));
      assertFalse(stringArray7.equals((Object)stringArray6));
      
      stringArray7[0] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray7[1] = "Y]1\"E7(2W.%;LTUM\"?";
      stringArray0[6] = stringArray7;
      // Undeclared exception!
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[2][8];
      Boolean[] booleanArray1 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = new Boolean("net.mooctest.Board");
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[4] = boolean4;
      boolean boolean5 = false;
      Boolean boolean6 = Boolean.valueOf(false);
      assertFalse(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean4));
      assertNotNull(boolean6);
      assertFalse(boolean6);
      
      booleanArray1[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf(boolean5);
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray1[6] = boolean7;
      Boolean boolean8 = Boolean.valueOf("");
      assertFalse(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean3));
      assertNotNull(boolean8);
      assertFalse(boolean8);
      
      booleanArray1[7] = boolean8;
      Boolean boolean9 = Boolean.FALSE;
      assertTrue(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean0));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean2));
      assertFalse(boolean9.equals((Object)boolean1));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray1[8] = boolean9;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[6];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Boolean boolean10 = new Boolean("net.mooctest.Board");
      assertFalse(boolean10.equals((Object)boolean3));
      assertTrue(boolean10.equals((Object)boolean6));
      assertTrue(boolean10.equals((Object)boolean4));
      assertFalse(boolean10.equals((Object)boolean0));
      assertTrue(boolean10.equals((Object)boolean5));
      assertFalse(boolean10.equals((Object)boolean1));
      assertTrue(boolean10.equals((Object)boolean9));
      assertFalse(boolean10.equals((Object)boolean2));
      assertTrue(boolean10.equals((Object)boolean8));
      assertTrue(boolean10.equals((Object)boolean7));
      assertNotNull(boolean10);
      assertFalse(boolean10);
      
      booleanArray2[0] = boolean10;
      booleanArray2[1] = boolean3;
      booleanArray2[2] = boolean8;
      booleanArray2[3] = boolean1;
      booleanArray2[4] = boolean3;
      booleanArray2[5] = boolean9;
      booleanArray0[1] = booleanArray2;
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "net.mooctest.Board";
      stringArray1[3] = "";
      stringArray1[4] = "net.mooctest.Board";
      stringArray1[3] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray1[8] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "";
      stringArray2[1] = "";
      stringArray2[2] = "*q7";
      stringArray2[3] = "net.mooctest.Board";
      stringArray2[4] = "net.mooctest.Board";
      stringArray2[5] = "";
      stringArray2[6] = "net.mooctest.Board";
      stringArray2[7] = "";
      stringArray2[8] = "";
      stringArray0[1] = stringArray2;
      stringArray0[2] = stringArray1;
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 7, 7, (-930), 7);
      assertEquals(3, stringArray0.length);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesBlack(stringArray1, 0, 0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray0, 903, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 902
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleWhiteMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Boolean[][] booleanArray0 = new Boolean[3][3];
      Boolean[] booleanArray1 = new Boolean[5];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      booleanArray1[0] = boolean0;
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray1[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray1[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf((boolean) boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertTrue(boolean4);
      
      booleanArray1[4] = boolean4;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[9];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = boolean4;
      booleanArray2[1] = boolean1;
      booleanArray2[2] = boolean1;
      booleanArray2[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray2[4] = boolean5;
      booleanArray2[5] = boolean2;
      Boolean boolean6 = Boolean.valueOf(true);
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean0));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray2[6] = boolean6;
      booleanArray2[7] = boolean1;
      booleanArray2[8] = boolean4;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[5];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean5;
      booleanArray3[1] = boolean2;
      booleanArray3[2] = boolean3;
      booleanArray3[3] = boolean1;
      booleanArray3[4] = boolean3;
      booleanArray0[2] = booleanArray3;
      board0.finalizeBlackMoves(booleanArray0, stringArray0, (-5900), 0, 0, 0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[2][0];
      String[] stringArray1 = new String[0];
      stringArray0[1] = stringArray1;
      board0.finalizeWhiteMoves((Boolean[][]) null, stringArray0, 0, 0, (-4106), 0);
      assertEquals(2, stringArray0.length);
      
      board0.finalizeWhiteMoves((Boolean[][]) null, stringArray0, 0, (-4106), 0, 0);
      assertEquals(2, stringArray0.length);
      
      board0.finalizeWhiteMoves((Boolean[][]) null, stringArray0, (-2814), (-4106), (-2814), 8);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[7][5];
      Boolean[] booleanArray1 = new Boolean[5];
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(true);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      booleanArray1[0] = boolean1;
      Boolean boolean2 = new Boolean(boolean0);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertTrue(boolean2);
      
      booleanArray1[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      booleanArray1[2] = boolean3;
      Boolean boolean4 = new Boolean("V");
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean3));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      booleanArray1[3] = boolean4;
      Boolean boolean5 = new Boolean(boolean0);
      assertFalse(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      assertTrue(boolean5);
      
      booleanArray1[4] = boolean5;
      booleanArray0[0] = booleanArray1;
      Boolean[] booleanArray2 = new Boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      Boolean boolean6 = Boolean.valueOf(boolean0);
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean5));
      assertNotNull(boolean6);
      assertTrue(boolean6);
      
      booleanArray2[0] = boolean6;
      Boolean boolean7 = new Boolean("/d7PL'?k*&*-");
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean6));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean4));
      assertNotNull(boolean7);
      assertFalse(boolean7);
      
      booleanArray2[1] = boolean7;
      booleanArray2[2] = boolean5;
      booleanArray2[3] = boolean4;
      booleanArray2[4] = boolean3;
      booleanArray2[5] = boolean2;
      Boolean boolean8 = Boolean.TRUE;
      assertTrue(boolean8.equals((Object)boolean5));
      assertFalse(boolean8.equals((Object)boolean4));
      assertTrue(boolean8.equals((Object)boolean2));
      assertFalse(boolean8.equals((Object)boolean7));
      assertNotNull(boolean8);
      assertTrue(boolean8);
      
      booleanArray2[6] = boolean8;
      booleanArray0[1] = booleanArray2;
      Boolean[] booleanArray3 = new Boolean[7];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = boolean7;
      booleanArray3[1] = boolean1;
      booleanArray2[3] = boolean8;
      booleanArray3[3] = boolean5;
      booleanArray3[4] = boolean4;
      booleanArray3[5] = boolean3;
      Boolean boolean9 = Boolean.valueOf("tKO_|iQy7;?Y");
      assertFalse(boolean9.equals((Object)boolean1));
      assertFalse(boolean9.equals((Object)boolean8));
      assertFalse(boolean9.equals((Object)boolean3));
      assertFalse(boolean9.equals((Object)boolean2));
      assertTrue(boolean9.equals((Object)boolean4));
      assertFalse(boolean9.equals((Object)boolean6));
      assertFalse(boolean9.equals((Object)boolean0));
      assertTrue(boolean9.equals((Object)boolean7));
      assertFalse(boolean9.equals((Object)boolean5));
      assertNotNull(boolean9);
      assertFalse(boolean9);
      
      booleanArray3[6] = boolean9;
      booleanArray0[2] = booleanArray3;
      Boolean[] booleanArray4 = new Boolean[6];
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      
      booleanArray4[0] = boolean9;
      booleanArray4[1] = boolean6;
      booleanArray4[2] = boolean2;
      booleanArray4[3] = boolean7;
      booleanArray4[4] = boolean7;
      booleanArray4[5] = boolean6;
      booleanArray0[3] = booleanArray4;
      Boolean[] booleanArray5 = new Boolean[8];
      assertFalse(booleanArray5.equals((Object)booleanArray1));
      assertFalse(booleanArray5.equals((Object)booleanArray3));
      assertFalse(booleanArray5.equals((Object)booleanArray4));
      assertFalse(booleanArray5.equals((Object)booleanArray2));
      
      booleanArray5[0] = boolean5;
      booleanArray5[1] = boolean7;
      booleanArray5[2] = boolean9;
      booleanArray5[3] = boolean2;
      booleanArray5[4] = boolean8;
      booleanArray5[5] = boolean5;
      booleanArray5[6] = boolean5;
      booleanArray5[7] = boolean5;
      booleanArray0[4] = booleanArray5;
      Boolean[] booleanArray6 = new Boolean[4];
      assertFalse(booleanArray6.equals((Object)booleanArray4));
      assertFalse(booleanArray6.equals((Object)booleanArray2));
      assertFalse(booleanArray6.equals((Object)booleanArray3));
      assertFalse(booleanArray6.equals((Object)booleanArray1));
      assertFalse(booleanArray6.equals((Object)booleanArray5));
      
      booleanArray6[0] = boolean2;
      booleanArray6[1] = boolean9;
      booleanArray6[2] = boolean2;
      booleanArray6[3] = boolean2;
      booleanArray0[5] = booleanArray6;
      Boolean[] booleanArray7 = new Boolean[6];
      assertFalse(booleanArray7.equals((Object)booleanArray4));
      assertFalse(booleanArray7.equals((Object)booleanArray6));
      assertFalse(booleanArray7.equals((Object)booleanArray3));
      assertFalse(booleanArray7.equals((Object)booleanArray2));
      assertFalse(booleanArray7.equals((Object)booleanArray5));
      assertFalse(booleanArray7.equals((Object)booleanArray1));
      
      booleanArray7[0] = boolean8;
      booleanArray7[1] = boolean1;
      booleanArray7[2] = boolean8;
      booleanArray7[3] = boolean6;
      booleanArray7[4] = boolean3;
      booleanArray7[5] = boolean5;
      booleanArray0[6] = booleanArray7;
      String[][] stringArray0 = new String[0][3];
      board0.finalizeBlackMoves(booleanArray0, stringArray0, 0, 0, 1, (-3053));
      assertEquals(7, booleanArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesBlack(stringArray1, 4, 4);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      board0.printBoard(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesWhite(stringArray1, 4, 4);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      board0.makeNodesWhite(stringArray1, 4, 1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, 1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.createBoard();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, (-476), 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -475
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.createBoard();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesBlack(stringArray1, 4, 4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      
      board0.printBoard(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesWhite(stringArray1, 4, 4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesWhite(stringArray1, 4, 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray1, (-1704), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1703
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = board0.createBoard();
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[][] stringArray1 = board0.checkPossibleBlackMoves(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesBlack(stringArray1, 3, 3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.printBoard(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      board0.makeNodesWhite(stringArray1, 3, 3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        board0.makeNodesBlack(stringArray0, (-498), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -498
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[12][7];
      String[] stringArray1 = new String[2];
      String string0 = "vee";
      stringArray1[0] = "vee";
      String string1 = "";
      stringArray1[1] = "";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[5];
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "vee";
      // Undeclared exception!
      try { 
        board0.printBoard(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      Boolean[][] booleanArray0 = new Boolean[0][1];
      String[][] stringArray0 = new String[4][4];
      String[] stringArray1 = new String[8];
      stringArray1[0] = ".";
      stringArray1[1] = "&z9Ny&di$(f";
      stringArray1[2] = "Jzh!R4dqFaY";
      String string0 = "*";
      // Undeclared exception!
      try { 
        board0.printBoard(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Board board0 = new Board();
      assertNotNull(board0);
      
      String[][] stringArray0 = new String[1][5];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "\"D9,(O";
      stringArray1[0] = "z=d";
      stringArray0[0] = stringArray1;
      String[][] stringArray2 = board0.createBoard();
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(8, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      
      board0.printBoard(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(8, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      Boolean[][] booleanArray0 = new Boolean[0][2];
      board0.printBoard(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(8, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      board0.printBoard(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(8, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      
      board0.finalizeBlackMoves(booleanArray0, stringArray2, 2901, (-2251), 0, 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(8, stringArray2.length);
      assertEquals(0, booleanArray0.length);
      assertNotSame(stringArray2, stringArray0);
      
      String[][] stringArray3 = board0.createBoard();
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(8, stringArray3.length);
      assertNotNull(stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      
      String[][] stringArray4 = board0.checkPossibleWhiteMoves(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertEquals(8, stringArray2.length);
      assertEquals(8, stringArray4.length);
      assertNotNull(stringArray4);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray4);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray2);
      
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray0, 2901, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("net.mooctest.Board", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Board board0 = new Board();
      String[][] stringArray0 = new String[8][3];
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "#yN5:6MeT_+s1\";UaU(";
      stringArray1[2] = "";
      stringArray1[3] = "net.mooctest.Board";
      stringArray1[4] = "[5[";
      stringArray1[5] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = "net.mooctest.Board";
      stringArray2[1] = "";
      stringArray2[2] = "#yN5:6MeT_+s1\";UaU(";
      stringArray2[3] = " ";
      stringArray2[4] = "#yN5:6MeT_+s1\";UaU(";
      stringArray2[6] = "#yN5:6MeT_+s1\";UaU(";
      stringArray2[7] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = "net.mooctest.Board";
      stringArray3[1] = " ";
      stringArray3[2] = " ";
      stringArray3[3] = " ";
      stringArray2[0] = "";
      stringArray3[5] = "";
      stringArray3[6] = " ";
      stringArray3[8] = "";
      String[] stringArray4 = new String[4];
      stringArray4[0] = "";
      stringArray4[1] = " ";
      stringArray4[2] = "[5[";
      stringArray4[3] = "";
      stringArray0[4] = stringArray4;
      String[] stringArray5 = new String[0];
      stringArray0[5] = stringArray5;
      String[] stringArray6 = new String[0];
      stringArray0[7] = stringArray6;
      // Undeclared exception!
      try { 
        board0.makeNodesWhite(stringArray0, 3, (-3336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("net.mooctest.Board", e);
      }
  }
}
