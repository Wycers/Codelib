/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 25 06:14:35 GMT 2020
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Map;
import net.mooctest.Edge;
import net.mooctest.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void node_test00()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Node node1 = new Node();
      node0.setSuffix(node1);
      node0.addRef(1094);
      node0.getEdges();
      Node node2 = new Node();
      node0.setSuffix(node2);
      node0.setSuffix(node2);
      node2.addRef(1053);
      Edge edge0 = new Edge("G2T_~", node0);
      node2.addEdge('V', edge0);
      node1.setSuffix(node0);
      node2.addRef('V');
      node2.getData(1094);
      node1.getEdges();
      node0.getEdge('V');
      node2.getEdges();
      node0.computeAndCacheCount();
      node1.getData();
      node2.getData();
  }

  @Test(timeout = 4000)
  public void node_test01()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setSuffix(node1);
      node0.addRef(1094);
      node0.getEdges();
      Node node2 = new Node();
      node0.setSuffix(node2);
      node0.setSuffix(node2);
      node2.addRef(1053);
      Node node3 = new Node();
      Edge edge0 = new Edge("G2T_~", node0);
      edge0.setLabel("");
      node3.addEdge('V', edge0);
      node1.setSuffix(node3);
      node2.getData(1094);
      node1.getEdges();
      node0.getEdge('V');
      node2.getEdges();
      node3.computeAndCacheCount();
      node0.getResultCount();
      node3.getData(1);
  }

  @Test(timeout = 4000)
  public void node_test02()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setSuffix(node1);
      node0.addRef(1094);
      node0.getEdges();
      Node node2 = new Node();
      node0.setSuffix(node2);
      node0.setSuffix(node2);
      node2.addRef(1053);
      Node node3 = new Node();
      Edge edge0 = new Edge("G2T_~", node0);
      node3.addEdge('V', edge0);
      node1.setSuffix(node3);
      node2.addRef(0);
      node2.getData(1094);
      node1.getEdges();
      node0.getEdge('V');
      node2.getEdges();
      node3.computeAndCacheCount();
      node3.getData();
      node2.getData();
  }

  @Test(timeout = 4000)
  public void node_test03()  throws Throwable  {
      Node node0 = new Node();
      node0.addRef(1366);
      node0.computeAndCacheCount();
      Edge edge0 = new Edge("w8=cDkg", node0);
      edge0.setLabel((String) null);
      edge0.setLabel((String) null);
      node0.getData(0);
      edge0.setLabel("");
      // Undeclared exception!
      try {
        node0.addEdge('\u0084', edge0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Illegal input character \u0084.
         //
         verifyException("net.mooctest.EdgeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test04()  throws Throwable  {
      Node node0 = new Node();
      node0.computeAndCacheCount();
      node0.setSuffix(node0);
      node0.getData();
      node0.computeAndCacheCount();
      node0.getEdge('5');
      node0.addRef(0);
      node0.computeAndCacheCount();
      node0.getData((-1289));
      node0.addRef((-1289));
      Node node1 = node0.getSuffix();
      node1.getResultCount();
      node1.addRef((-696));
      node1.getData(2482);
      node0.setSuffix(node1);
      node0.getData();
      node0.getData();
  }

  @Test(timeout = 4000)
  public void node_test05()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setSuffix(node1);
      Edge edge0 = new Edge((String) null, node0);
      edge0.setLabel("G2T_~");
      edge0.setLabel("G2T_~");
      node0.addEdge('V', edge0);
      node0.addRef(1094);
      node0.getEdges();
      node0.setSuffix(node0);
      node1.computeAndCacheCount();
      node1.addRef(0);
      node0.addRef(0);
      node1.getData(1094);
      node1.getEdges();
      node0.getEdge('V');
      node1.addEdge('V', edge0);
      node1.addRef(1);
  }

  @Test(timeout = 4000)
  public void node_test06()  throws Throwable  {
      Node node0 = new Node();
      node0.computeAndCacheCount();
      Node node1 = new Node();
      node0.setSuffix(node1);
      Node node2 = node0.getSuffix();
      node2.computeAndCacheCount();
      node2.getData(1134);
      node1.getEdge('T');
      node2.addEdge('T', (Edge) null);
      node0.getData(0);
      node2.getResultCount();
      node0.addRef(0);
      node0.getResultCount();
      node2.setSuffix(node0);
      node2.addRef(1134);
      node2.getResultCount();
      node2.getEdges();
      node2.getResultCount();
      node0.getData(3965);
  }

  @Test(timeout = 4000)
  public void node_test07()  throws Throwable  {
      Node node0 = new Node();
      char char0 = ')';
      char char1 = '\u0084';
      // Undeclared exception!
      try {
        node0.getEdge('\u0084');
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Illegal input character \u0084.
         //
         verifyException("net.mooctest.EdgeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test08()  throws Throwable  {
      Node node0 = new Node();
      char char0 = '$';
      String string0 = "P)";
      char char1 = '!';
      node0.getEdge('!');
      node0.addEdge('<', (Edge) null);
      // Undeclared exception!
      try {
        node0.getData(1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test09()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node1.getData();
      node0.addRef((-1));
      node0.computeAndCacheCount();
      node1.addRef(1);
      node1.addRef((-1));
      node0.getEdge('=');
      node1.addEdge('=', (Edge) null);
      // Undeclared exception!
      try {
        node1.getData((-1));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test10()  throws Throwable  {
      Node node0 = new Node();
      node0.getSuffix();
      try {
        node0.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test11()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setSuffix(node1);
      node0.addRef((-2465));
      Node node2 = node0.getSuffix();
      node0.computeAndCacheCount();
      node2.setSuffix(node0);
      Node node3 = new Node();
      Edge edge0 = new Edge((String) null, node3);
      node1.addEdge('b', edge0);
      node2.addRef(1);
      node2.addRef(0);
      node2.computeAndCacheCount();
      node2.getData();
      Node node4 = node0.getSuffix();
      node4.getResultCount();
      node0.addEdge('b', edge0);
      node4.addRef((-1619));
      node2.getData(1);
      Node node5 = node2.getSuffix();
      node5.getResultCount();
      node2.setSuffix(node1);
      node1.getData((-1619));
      node0.addRef(0);
      node4.getSuffix();
  }

  @Test(timeout = 4000)
  public void node_test12()  throws Throwable  {
      Node node0 = new Node();
      node0.getData();
      Edge edge0 = new Edge((String) null, node0);
      node0.addEdge('\"', edge0);
      Node node1 = new Node();
      node0.getData(0);
      node1.getSuffix();
      try {
        node1.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test13()  throws Throwable  {
      Node node0 = new Node();
      char char0 = ')';
      node0.getEdge(')');
      node0.addEdge('1', (Edge) null);
      // Undeclared exception!
      try {
        node0.computeAndCacheCount();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test14()  throws Throwable  {
      Node node0 = new Node();
      node0.computeAndCacheCount();
      node0.setSuffix(node0);
      node0.getData();
      node0.computeAndCacheCount();
      node0.getEdge('5');
      node0.addRef(0);
      node0.computeAndCacheCount();
      node0.getData((-1289));
      node0.addRef((-1289));
      Node node1 = node0.getSuffix();
      node1.getData(2482);
      node0.setSuffix(node1);
      node0.getData();
  }

  @Test(timeout = 4000)
  public void node_test15()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node1.computeAndCacheCount();
      node0.setSuffix(node1);
      node0.addRef(655);
      Node node2 = node0.getSuffix();
      node0.setSuffix(node2);
      node1.addRef(2595);
      node2.addRef(0);
      node0.addRef(1923);
      node2.addRef(2595);
      node2.getResultCount();
      node0.addRef(1923);
      node0.getEdge('y');
      node0.setSuffix(node1);
  }

  @Test(timeout = 4000)
  public void node_test16()  throws Throwable  {
      Node node0 = new Node();
      node0.getData((-4047));
      node0.getData((-4047));
      node0.computeAndCacheCount();
      node0.getResultCount();
      Edge edge0 = new Edge("", node0);
      edge0.setDest(node0);
      edge0.setDest(node0);
      node0.addEdge('|', edge0);
      node0.addRef((-1914));
      node0.getData(1);
      node0.getData((-4047));
      node0.getData();
  }

  @Test(timeout = 4000)
  public void node_test17()  throws Throwable  {
      Node node0 = new Node();
      node0.getData(0);
      node0.addRef(0);
      node0.getData((-1));
      node0.addRef(0);
      try {
        node0.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test18()  throws Throwable  {
      Node node0 = new Node();
      node0.getData();
      Node node1 = new Node();
      node0.setSuffix(node1);
      node1.getEdge('v');
      node0.addEdge('6', (Edge) null);
      node0.setSuffix(node1);
      // Undeclared exception!
      try {
        node0.getData();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void node_test19()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Map<Character, Edge> map0 = node0.getEdges();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());

      Edge edge0 = node0.getEdge('$');
      assertNull(edge0);

      node0.addEdge('i', (Edge) null);
      // Undeclared exception!
      try {
        node0.computeAndCacheCount();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test20()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Node node1 = new Node();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);

      Edge edge0 = new Edge("", node0);
      assertFalse(node0.equals((Object)node1));
      assertNotNull(edge0);
      assertEquals("", edge0.getLabel());

      node0.addEdge('R', edge0);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals("", edge0.getLabel());

      edge0.setDest(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals("", edge0.getLabel());

      node0.setSuffix(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);

      Node node2 = node0.getSuffix();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);

      edge0.setDest(node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals("", edge0.getLabel());

      edge0.setLabel("");
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals("", edge0.getLabel());

      node0.addEdge('R', edge0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertEquals("", edge0.getLabel());

      node2.addEdge('>', edge0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertEquals("", edge0.getLabel());

      node2.getData();
  }

  @Test(timeout = 4000)
  public void node_test21()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Edge edge0 = node0.getEdge('q');
      assertNull(edge0);

      node0.addEdge('q', (Edge) null);
      // Undeclared exception!
      try {
        node0.getData();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void node_test22()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      node0.setSuffix(node0);
      int int0 = (-1);
      node0.addRef((-1));
      node0.addRef((-1));
      Edge edge0 = node0.getEdge('\'');
      assertNull(edge0);

      try {
        node0.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test23()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Map<Character, Edge> map0 = node0.getEdges();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());

      Collection<Integer> collection0 = node0.getData();
      assertNotNull(collection0);

      Map<Character, Edge> map1 = node0.getEdges();
      assertSame(map1, map0);
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());

      Map<Character, Edge> map2 = node0.getEdges();
      assertSame(map2, map1);
      assertSame(map2, map0);
      assertNotNull(map2);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
  }

  @Test(timeout = 4000)
  public void node_test24()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Node node1 = new Node();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);

      node0.setSuffix(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);

      Collection<Integer> collection0 = node0.getData(1000);
      assertFalse(node0.equals((Object)node1));
      assertFalse(collection0.contains(1000));
      assertNotSame(node0, node1);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void node_test25()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      try {
        node0.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test26()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Node node1 = new Node();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);

      node0.setSuffix(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);

      int int0 = node0.computeAndCacheCount();
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(0, int0);

      int int1 = node0.getResultCount();
      assertFalse(node0.equals((Object)node1));
      assertTrue(int1 == int0);
      assertNotSame(node0, node1);
      assertEquals(0, int1);

      int int2 = node0.getResultCount();
      assertFalse(node0.equals((Object)node1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(node0, node1);
      assertEquals(0, int2);

      node0.addRef(1);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);

      node0.addRef((-1));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);

      Map<Character, Edge> map0 = node0.getEdges();
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());

      node1.addRef(0);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void node_test27()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      node0.addRef((-1));
      node0.addRef((-1));
      Node node1 = node0.getSuffix();
      assertNull(node1);

      try {
        node0.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test28()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      node0.addRef(0);
  }

  @Test(timeout = 4000)
  public void node_test29()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Collection<Integer> collection0 = node0.getData();
      assertNotNull(collection0);

      node0.addRef((-441));
      Collection<Integer> collection1 = node0.getData((-2630));
      assertFalse(collection1.equals((Object)collection0));
      assertTrue(collection1.contains((-441)));
      assertFalse(collection1.contains((-2630)));
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);

      int int0 = node0.computeAndCacheCount();
      assertEquals(1, int0);

      Node node1 = new Node();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);

      node0.setSuffix(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);

      Character character0 = new Character(':');
      assertNotNull(character0);
      assertEquals(':', (char)character0);

      int int1 = node0.getResultCount();
      assertFalse(node0.equals((Object)node1));
      assertTrue(int1 == int0);
      assertNotSame(node0, node1);
      assertEquals(1, int1);

      Collection<Integer> collection2 = node0.getData(1);
      assertFalse(node0.equals((Object)node1));
      assertTrue(collection2.equals((Object)collection1));
      assertFalse(collection2.equals((Object)collection0));
      assertTrue(collection2.contains((-441)));
      assertFalse(collection2.contains(1));
      assertNotSame(node0, node1);
      assertNotSame(collection2, collection1);
      assertNotSame(collection2, collection0);
      assertNotNull(collection2);

      try {
        node1.getResultCount();
        fail("Expecting exception: IllegalStateException");

      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void node_test30()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);

      Collection<Integer> collection0 = node0.getData();
      assertNotNull(collection0);

      int int0 = node0.computeAndCacheCount();
      assertEquals(0, int0);

      Collection<Integer> collection1 = node0.getData();
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(collection1.contains(int0));
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);

      Collection<Integer> collection2 = node0.getData();
      assertTrue(collection2.equals((Object)collection1));
      assertTrue(collection2.equals((Object)collection0));
      assertFalse(collection2.contains(int0));
      assertNotSame(collection2, collection0);
      assertNotSame(collection2, collection1);
      assertNotNull(collection2);

      Collection<Integer> collection3 = node0.getData(0);
      assertTrue(collection3.equals((Object)collection0));
      assertTrue(collection3.equals((Object)collection2));
      assertTrue(collection3.equals((Object)collection1));
      assertFalse(collection3.contains(0));
      assertNotSame(collection3, collection1);
      assertNotSame(collection3, collection0);
      assertNotSame(collection3, collection2);
      assertNotNull(collection3);

      node0.addRef(0);
      node0.addRef(0);
      int int1 = node0.getResultCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);

      Collection<Integer> collection4 = node0.getData((-1));
      assertFalse(collection4.equals((Object)collection2));
      assertFalse(collection4.equals((Object)collection1));
      assertFalse(collection4.equals((Object)collection0));
      assertFalse(collection4.equals((Object)collection3));
      assertFalse(collection4.contains((-1)));
      assertTrue(collection4.contains(0));
      assertNotSame(collection4, collection2);
      assertNotSame(collection4, collection1);
      assertNotSame(collection4, collection0);
      assertNotSame(collection4, collection3);
      assertNotNull(collection4);
  }

  @Test(timeout = 4000)
  public void node_test31()  throws Throwable  {
      Node node0 = new Node();
      node0.computeAndCacheCount();
      node0.setSuffix(node0);
      Node node1 = node0.getSuffix();
      node1.computeAndCacheCount();
      node1.getData(1134);
      node0.getEdge('T');
      node0.addEdge('T', (Edge) null);
      node0.getData((-1215));
      node0.getEdge('T');
      node1.addEdge('T', (Edge) null);
      node0.getData(0);
      node1.getResultCount();
      node0.addRef(0);
      node0.getResultCount();
      node1.setSuffix(node0);
      node1.addRef(1134);
      node1.getResultCount();
      node1.getEdges();
      node1.getResultCount();
      // Undeclared exception!
      try {
        node0.getData(3965);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void node_test32()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.setSuffix(node1);
      node0.addRef(1094);
      node0.getEdges();
      Node node2 = new Node();
      node0.setSuffix(node2);
      node0.setSuffix(node2);
      node2.addRef(1053);
      Node node3 = new Node();
      Edge edge0 = new Edge("G2T_~", node0);
      node3.addEdge('V', edge0);
      node1.setSuffix(node3);
      node2.addRef(0);
      node2.getData(1094);
      node1.getEdges();
      node0.getEdge('V');
      node0.addRef(1391);
      node2.getEdges();
      node3.computeAndCacheCount();
      Collection<Integer> collection0 = node3.getData();
      Collection<Integer> collection1 = node2.getData();
      assertTrue(collection1.contains(1391));

      Collection<Integer> collection2 = node3.getData(2);
      assertTrue(collection2.equals((Object)collection0));
      assertTrue(collection2.contains(1391));

      Collection<Integer> collection3 = node2.getData(2);
      assertFalse(collection3.equals((Object)collection1));

      int int0 = node0.getResultCount();
      assertEquals(2, int0);
  }
}
