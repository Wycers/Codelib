/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 25 06:12:24 GMT 2020
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import net.mooctest.Edge;
import net.mooctest.GeneralizedSuffixTree;
import net.mooctest.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GeneralizedSuffixTree_ESTest extends GeneralizedSuffixTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      generalizedSuffixTree0.put("net.mooctest.GeneralizedSuffixTree$Pair", 0);
      GeneralizedSuffixTree.ResultInfo generalizedSuffixTree_ResultInfo0 = generalizedSuffixTree0.searchWithCount("net.mooctest.Node", (-2894));
      assertNotNull(generalizedSuffixTree_ResultInfo0);
      assertEquals(0, generalizedSuffixTree_ResultInfo0.totalResults);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      generalizedSuffixTree0.put("net.mooctest.EdgeBag", 1941);
      Collection<Integer> collection0 = generalizedSuffixTree0.search("n", 914);
      assertNotNull(collection0);
      assertTrue(collection0.contains(1941));
      assertFalse(collection0.contains(914));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      generalizedSuffixTree0.put("GK6-%w", 0);
      int int0 = generalizedSuffixTree0.computeCount();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.searchWithCount((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.GeneralizedSuffixTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.search((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.GeneralizedSuffixTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.search((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.GeneralizedSuffixTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      generalizedSuffixTree0.put("#0VU:FO", 0);
      generalizedSuffixTree0.put("3U6$oU{t^\"(12j", 816);
      generalizedSuffixTree0.put(", expectep at least ", 2554);
      // Undeclared exception!
      generalizedSuffixTree0.put("net.mooctest.GeneralizedSuffixTree", 2554);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.put((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.GeneralizedSuffixTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      Node node0 = generalizedSuffixTree0.getRoot();
      assertNotNull(node0);
      
      Edge edge0 = new Edge("fFw|lD&V{g8V)l}jF$", node0);
      assertNotNull(edge0);
      
      node0.addEdge('O', edge0);
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.computeCount();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      Node node0 = generalizedSuffixTree0.getRoot();
      assertNotNull(node0);
      
      node0.addEdge('O', (Edge) null);
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.computeCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      Collection<Integer> collection0 = generalizedSuffixTree0.search("fFw|lD&V{g8V)l}jF$", 16);
      assertNotNull(collection0);
      assertFalse(collection0.contains(16));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      generalizedSuffixTree0.put("net.mooctest.EdgeBag", 1941);
      Collection<Integer> collection0 = generalizedSuffixTree0.search("net.mooctest.EdgeBag", (-1));
      assertNotNull(collection0);
      assertTrue(collection0.contains(1941));
      assertFalse(collection0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      assertNotNull(generalizedSuffixTree0);
      
      generalizedSuffixTree0.put("", 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      Node node0 = generalizedSuffixTree0.getRoot();
      node0.setSuffix(node0);
      generalizedSuffixTree0.put("y1R:T:e]1*s#zo 2xn", 16);
      generalizedSuffixTree0.put("y1R:T:e]1*s#zo 2xn", 199);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      generalizedSuffixTree0.put(",?expec7ep at least ", 2554);
      try { 
        generalizedSuffixTree0.put(",?expec7ep at least ", 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The input index must not be less than any of the previously inserted ones. Got 0, expected at least 2554
         //
         verifyException("net.mooctest.GeneralizedSuffixTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      generalizedSuffixTree0.put("getResultCount() shouldn't be call6d without calling computeCount( first", 0);
      // Undeclared exception!
      try { 
        generalizedSuffixTree0.searchWithCount("getResultCount() shouldn't be call6d without calling computeCount( first", 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getResultCount() shouldn't be called without calling computeCount() first
         //
         verifyException("net.mooctest.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      Collection<Integer> collection0 = generalizedSuffixTree0.search("");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      int int0 = generalizedSuffixTree0.computeCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GeneralizedSuffixTree generalizedSuffixTree0 = new GeneralizedSuffixTree();
      Node node0 = generalizedSuffixTree0.getRoot();
      Collection<Integer> collection0 = node0.getData(16);
      GeneralizedSuffixTree.ResultInfo generalizedSuffixTree_ResultInfo0 = new GeneralizedSuffixTree.ResultInfo(collection0, 16);
      assertEquals(16, generalizedSuffixTree_ResultInfo0.totalResults);
  }
}
